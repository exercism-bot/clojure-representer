(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-5)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-5 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-5))))
    nil)))
 (def
  PLACEHOLDER-5
  (fn*
   ([PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2 PLACEHOLDER-1]
     (case*
      PLACEHOLDER-2
      1
      1
      (str "One for " PLACEHOLDER-1 ", one for me.")
      {0
       [0
        (let*
         [PLACEHOLDER-3 clojure.core/= PLACEHOLDER-4 PLACEHOLDER-2]
         (if
          (PLACEHOLDER-3 '"" PLACEHOLDER-4)
          "One for you, one for me."
          (if
           (PLACEHOLDER-3 'nil PLACEHOLDER-4)
           "One for you, one for me."
           (str "One for " PLACEHOLDER-1 ", one for me."))))],
       1 [or "One for you, one for me."]}
      :compact
      :hash-equiv
      #{0})))
   ([] "One for you, one for me."))))
