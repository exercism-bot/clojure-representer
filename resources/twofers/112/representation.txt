(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-7)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-7 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-7))))
    nil)))
 (def
  PLACEHOLDER-7
  (fn*
   ([] (PLACEHOLDER-7 "you"))
   ([PLACEHOLDER-1] (str "One for " PLACEHOLDER-1 ", one for me."))))
 (PLACEHOLDER-7)
 (PLACEHOLDER-7 "Zaphod")
 (def
  PLACEHOLDER-8
  (fn*
   ([& PLACEHOLDER-2]
    (if
     (empty? PLACEHOLDER-2)
     "One for you, one for me."
     (str "One for " (first PLACEHOLDER-2) ", one for me.")))))
 (PLACEHOLDER-8)
 (PLACEHOLDER-8 "Ford")
 (def
  PLACEHOLDER-9
  (fn*
   ([& PLACEHOLDER-3]
    (if
     (empty? PLACEHOLDER-3)
     "One for you, one for me."
     (str "One for " (apply str PLACEHOLDER-3) ", one for me.")))))
 (PLACEHOLDER-9)
 (PLACEHOLDER-9 "Ford")
 (def
  PLACEHOLDER-10
  (fn*
   ([& PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-6
      (let*
       [PLACEHOLDER-5 (first PLACEHOLDER-4)]
       (if PLACEHOLDER-5 PLACEHOLDER-5 "you"))]
     (str "One for " PLACEHOLDER-6 ", one for me.")))))
 (PLACEHOLDER-10)
 (PLACEHOLDER-10 "Arthur"))
