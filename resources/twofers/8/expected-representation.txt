(do
 (do
  (clojure.core/in-ns 'two-PLACEHOLDER-3er)
  ((PLACEHOLDER-3n*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/rePLACEHOLDER-3er 'clojure.core)
       (PLACEHOLDER-3inally (clojure.lang.Var/popThreadBindings)))))))
  (iPLACEHOLDER-3
   (.equals 'two-PLACEHOLDER-3er 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (PLACEHOLDER-3n*
      ([]
       (clojure.core/commute
        (clojure.core/derePLACEHOLDER-3 #'clojure.core/*loaded-libs*)
        clojure.core/conj
        'two-PLACEHOLDER-3er))))
    nil)))
 (dePLACEHOLDER-3
  PLACEHOLDER-3
  (PLACEHOLDER-3n*
   ([PLACEHOLDER-1]
    (PLACEHOLDER-3ormat
     "One PLACEHOLDER-3or %s, one PLACEHOLDER-3or me."
     PLACEHOLDER-1))))
 (dePLACEHOLDER-3
  two-PLACEHOLDER-3er
  (PLACEHOLDER-3n*
   ([] (PLACEHOLDER-3 "you"))
   ([PLACEHOLDER-2] (PLACEHOLDER-3 PLACEHOLDER-2)))))
