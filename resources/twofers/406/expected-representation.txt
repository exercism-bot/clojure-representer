(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-13)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (do
        (clojure.core/refer 'clojure.core)
        (clojure.core/require '[clojure.string :as string]))
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-13 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-13))))
    nil)))
 (def
  PLACEHOLDER-11
  (fn*
   ([& PLACEHOLDER-1]
    (let*
     [PLACEHOLDER-2
      (string/join ", " PLACEHOLDER-1)
      PLACEHOLDER-3
      (clojure.core/seq PLACEHOLDER-2)
      PLACEHOLDER-4
      (clojure.core/first PLACEHOLDER-3)
      PLACEHOLDER-5
      (clojure.core/next PLACEHOLDER-3)
      PLACEHOLDER-6
      PLACEHOLDER-4
      PLACEHOLDER-7
      PLACEHOLDER-5]
     (str
      (string/upper-case PLACEHOLDER-6)
      (apply str PLACEHOLDER-7)
      ".")))))
 (def
  PLACEHOLDER-12
  (fn*
   ([] (PLACEHOLDER-12 "me"))
   ([PLACEHOLDER-8] (string/join " " ["one for" PLACEHOLDER-8]))))
 (def
  PLACEHOLDER-13
  (fn*
   ([] (PLACEHOLDER-13 "you"))
   ([PLACEHOLDER-9]
    (PLACEHOLDER-11 (PLACEHOLDER-12 PLACEHOLDER-9) (PLACEHOLDER-12)))))
 (def
  PLACEHOLDER-13-unflexible
  (fn*
   ([] (PLACEHOLDER-13-unflexible "you"))
   ([PLACEHOLDER-10] (str "One for " PLACEHOLDER-10 ", one for me.")))))
