((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as str])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (map (fn* [PLACEHOLDER-0] (Integer/parseInt PLACEHOLDER-0)) (PLACEHOLDER-1 (str num) (re-pattern "")))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-2 PLACEHOLDER-3] (long (loop* [PLACEHOLDER-3 1 PLACEHOLDER-3 PLACEHOLDER-3] (if (zero? PLACEHOLDER-3) PLACEHOLDER-3 (recur (* PLACEHOLDER-2 PLACEHOLDER-3) (dec PLACEHOLDER-3)))))))) (def PLACEHOLDER-7 (fn* ([num] (let* [PLACEHOLDER-8 (PLACEHOLDER-0 num) PLACEHOLDER-8 (count PLACEHOLDER-8)] (reduce (fn* [PLACEHOLDER-8 PLACEHOLDER-9] (+ PLACEHOLDER-8 (PLACEHOLDER-2 PLACEHOLDER-9 PLACEHOLDER-8))) 0 PLACEHOLDER-8))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-7 num)))))))