((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (require (quote [clojure.string :as str])) (def PLACEHOLDER-3 (fn* ([num PLACEHOLDER-4] (reduce * (take PLACEHOLDER-4 (cycle (list num))))))) (def PLACEHOLDER-6 (fn* ([num] (map (fn* [PLACEHOLDER-2] (Integer/parseInt PLACEHOLDER-2)) (PLACEHOLDER-1 (str num) (re-pattern "")))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-6 num)] (= num (reduce + (map (fn* [PLACEHOLDER-0] (PLACEHOLDER-3 PLACEHOLDER-0 (count PLACEHOLDER-5))) PLACEHOLDER-5)))))))))