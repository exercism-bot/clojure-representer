((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (require (quote [clojure.string :as str])) (def PLACEHOLDER-1 (fn* ([num PLACEHOLDER-2] (reduce * (take PLACEHOLDER-2 (cycle (list num))))))) (def PLACEHOLDER-6 (fn* ([num] (map (fn* [PLACEHOLDER-5] (Integer/parseInt PLACEHOLDER-5)) (PLACEHOLDER-0 (str num) (re-pattern "")))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-3 (PLACEHOLDER-6 num)] (= num (reduce + (map (fn* [PLACEHOLDER-4] (PLACEHOLDER-1 PLACEHOLDER-4 (count PLACEHOLDER-3))) PLACEHOLDER-3)))))))))