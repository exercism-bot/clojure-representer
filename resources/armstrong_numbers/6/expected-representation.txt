((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-1 PLACEHOLDER-13] (reduce * (repeat PLACEHOLDER-13 PLACEHOLDER-1))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-9] ((comp long /) PLACEHOLDER-9 10)))) (def PLACEHOLDER-2 (fn* ([num] ((comp inc long) (PLACEHOLDER-0 num))))) (def PLACEHOLDER-6 (fn* ([num] (PLACEHOLDER-6 num ())) ([num PLACEHOLDER-11] (let* [PLACEHOLDER-13 (PLACEHOLDER-8 num) PLACEHOLDER-12 (conj PLACEHOLDER-11 (mod num 10))] (if (<= num 9) PLACEHOLDER-12 (recur PLACEHOLDER-13 PLACEHOLDER-12)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-7 (<= num 9)] (if PLACEHOLDER-7 PLACEHOLDER-7 (let* [PLACEHOLDER-14 (PLACEHOLDER-2 num) PLACEHOLDER-3 (partial reduce +) PLACEHOLDER-4 (partial map (fn* [PLACEHOLDER-5] (PLACEHOLDER-10 PLACEHOLDER-5 PLACEHOLDER-14)))] (= num ((comp PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-6) num))))))))))