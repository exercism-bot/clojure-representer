((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-1 PLACEHOLDER-1] (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-1))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-3] ((comp long /) PLACEHOLDER-3 10)))) (def PLACEHOLDER-4 (fn* ([num] ((comp inc long) (PLACEHOLDER-5 num))))) (def PLACEHOLDER-5 (fn* ([num] (PLACEHOLDER-5 num ())) ([num PLACEHOLDER-6] (let* [PLACEHOLDER-1 (PLACEHOLDER-3 num) PLACEHOLDER-7 (conj PLACEHOLDER-6 (mod num 10))] (if (<= num 9) PLACEHOLDER-7 (recur PLACEHOLDER-1 PLACEHOLDER-7)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-9 (<= num 9)] (if PLACEHOLDER-9 PLACEHOLDER-9 (let* [PLACEHOLDER-11 (PLACEHOLDER-4 num) PLACEHOLDER-12 (partial reduce +) PLACEHOLDER-12 (partial map (fn* [PLACEHOLDER-12] (PLACEHOLDER-0 PLACEHOLDER-12 PLACEHOLDER-11)))] (= num ((comp PLACEHOLDER-12 PLACEHOLDER-12 PLACEHOLDER-5) num))))))))))