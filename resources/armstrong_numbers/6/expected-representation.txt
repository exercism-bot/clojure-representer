((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-1 PLACEHOLDER-12] (reduce * (repeat PLACEHOLDER-12 PLACEHOLDER-1))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-8] ((comp long /) PLACEHOLDER-8 10)))) (def PLACEHOLDER-2 (fn* ([num] ((comp inc long) (PLACEHOLDER-0 num))))) (def PLACEHOLDER-5 (fn* ([num] (PLACEHOLDER-5 num ())) ([num PLACEHOLDER-10] (let* [PLACEHOLDER-12 (PLACEHOLDER-7 num) PLACEHOLDER-11 (conj PLACEHOLDER-10 (mod num 10))] (if (<= num 9) PLACEHOLDER-11 (recur PLACEHOLDER-12 PLACEHOLDER-11)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (<= num 9)] (if PLACEHOLDER-6 PLACEHOLDER-6 (let* [PLACEHOLDER-13 (PLACEHOLDER-2 num) PLACEHOLDER-3 (partial reduce +) PLACEHOLDER-4 (partial map (fn* [PLACEHOLDER-14] (PLACEHOLDER-9 PLACEHOLDER-14 PLACEHOLDER-13)))] (= num ((comp PLACEHOLDER-3 PLACEHOLDER-4 PLACEHOLDER-5) num))))))))))