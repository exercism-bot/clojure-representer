((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.math :as PLACEHOLDER-3])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (count (str num))))) (def PLACEHOLDER-12 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-11 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-6 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-10 (clojure.core/chunk-buffer PLACEHOLDER-6)] (if (loop* [PLACEHOLDER-5 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-5 PLACEHOLDER-6) (let* [PLACEHOLDER-8 (clojure.core/nth PLACEHOLDER-13 PLACEHOLDER-5)] (do (clojure.core/chunk-append PLACEHOLDER-10 (- (byte PLACEHOLDER-8) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-5)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-10) (PLACEHOLDER-11 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-10) nil))) (let* [PLACEHOLDER-8 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (- (byte PLACEHOLDER-8) 48) (PLACEHOLDER-11 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-1 PLACEHOLDER-8] (reduce * (repeat PLACEHOLDER-8 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (= (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-9 PLACEHOLDER-7 (PLACEHOLDER-4 num))) (PLACEHOLDER-12 num))) num))))))