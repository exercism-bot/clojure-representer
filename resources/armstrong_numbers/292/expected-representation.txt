((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.math :as PLACEHOLDER-3])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (count (str num))))) (def PLACEHOLDER-12 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-10 ([PLACEHOLDER-5] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-5 PLACEHOLDER-5] (let* [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-5)] (if PLACEHOLDER-5 (do (if (clojure.core/chunked-seq? PLACEHOLDER-5) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-5) PLACEHOLDER-6 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-9 (clojure.core/chunk-buffer PLACEHOLDER-6)] (if (loop* [PLACEHOLDER-11 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-11 PLACEHOLDER-6) (let* [PLACEHOLDER-7 (clojure.core/nth-13 PLACEHOLDER-11)] (do (clojure.core/chunk-append PLACEHOLDER-9 (- (byte PLACEHOLDER-7) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-11)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-9) (PLACEHOLDER-10 (clojure.core/chunk-rest PLACEHOLDER-5))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-9) nil))) (let* [PLACEHOLDER-7 (clojure.core/first PLACEHOLDER-5)] (clojure.core/cons (- (byte PLACEHOLDER-7) 48) (PLACEHOLDER-10 (clojure.core/rest PLACEHOLDER-5)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (= (reduce + (map (fn* [PLACEHOLDER-2] (PLACEHOLDER-8 PLACEHOLDER-2 (PLACEHOLDER-4 num))) (PLACEHOLDER-12 num))) num))))))