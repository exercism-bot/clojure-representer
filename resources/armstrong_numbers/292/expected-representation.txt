((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.math :as PLACEHOLDER-3])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (count (str num))))) (def PLACEHOLDER-11 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-5 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-6 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-13 (clojure.core/chunk-buffer PLACEHOLDER-6)] (if (loop* [PLACEHOLDER-9 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-9 PLACEHOLDER-6) (let* [PLACEHOLDER-7 (clojure.core/nth-12 PLACEHOLDER-9)] (do (clojure.core/chunk-append PLACEHOLDER-13 (- (byte PLACEHOLDER-7) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-9)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-13) (PLACEHOLDER-5 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-13) nil))) (let* [PLACEHOLDER-7 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (- (byte PLACEHOLDER-7) 48) (PLACEHOLDER-5 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (= (reduce + (map (fn* [PLACEHOLDER-10] (PLACEHOLDER-8 PLACEHOLDER-10 (PLACEHOLDER-4 num))) (PLACEHOLDER-11 num))) num))))))