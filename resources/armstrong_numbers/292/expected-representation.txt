((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.math :as PLACEHOLDER-2])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([num] (count (str num))))) (def PLACEHOLDER-10 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-5 ([PLACEHOLDER-12] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-12 PLACEHOLDER-12] (let* [PLACEHOLDER-12 (clojure.core/seq PLACEHOLDER-12)] (if PLACEHOLDER-12 (do (if (clojure.core/chunked-seq? PLACEHOLDER-12) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-12) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-8 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-11 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-11 PLACEHOLDER-4) (let* [PLACEHOLDER-6 (clojure.core/nth PLACEHOLDER-13 PLACEHOLDER-11)] (do (clojure.core/chunk-append PLACEHOLDER-8 (- (byte PLACEHOLDER-6) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-11)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-8) (PLACEHOLDER-5 (clojure.core/chunk-rest PLACEHOLDER-12))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-8) nil))) (let* [PLACEHOLDER-6 (clojure.core/first PLACEHOLDER-12)] (clojure.core/cons (- (byte PLACEHOLDER-6) 48) (PLACEHOLDER-5 (clojure.core/rest PLACEHOLDER-12)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-1 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (= (reduce + (map (fn* [PLACEHOLDER-9] (PLACEHOLDER-7 PLACEHOLDER-9 (PLACEHOLDER-3 num))) (PLACEHOLDER-10 num))) num))))))