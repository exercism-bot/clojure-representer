((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.math :as PLACEHOLDER-0])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (count (str num))))) (def PLACEHOLDER-1 (fn* ([num] (let* [PLACEHOLDER-1 (fn* PLACEHOLDER-2 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-2 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-2 (clojure.core/int (clojure.core/count PLACEHOLDER-2)) PLACEHOLDER-4 (clojure.core/chunk-buffer PLACEHOLDER-2)] (if (loop* [PLACEHOLDER-5 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-5 PLACEHOLDER-2) (let* [PLACEHOLDER-6 (clojure.core/nth-12 PLACEHOLDER-5)] (do (clojure.core/chunk-append PLACEHOLDER-4 (- (byte PLACEHOLDER-6) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-5)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-4) (PLACEHOLDER-2 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-4) nil))) (let* [PLACEHOLDER-6 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (- (byte PLACEHOLDER-6) 48) (PLACEHOLDER-2 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-1 (str num)))))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-10 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-10))))) (def armstrong? (fn* ([num] (= (reduce + (map (fn* [PLACEHOLDER-12] (PLACEHOLDER-10 PLACEHOLDER-12 (PLACEHOLDER-0 num))) (PLACEHOLDER-1 num))) num))))))