((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([num PLACEHOLDER-9] (PLACEHOLDER-13 (PLACEHOLDER-10 num) PLACEHOLDER-9)))) (def PLACEHOLDER-6 (fn* ([num PLACEHOLDER-4] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-1 ([PLACEHOLDER-5] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-5 PLACEHOLDER-5] (let* [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-5)] (if PLACEHOLDER-5 (do (if (clojure.core/chunked-seq? PLACEHOLDER-5) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-5) PLACEHOLDER-3 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-7 (clojure.core/chunk-buffer PLACEHOLDER-3)] (if (loop* [PLACEHOLDER-11 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-11 PLACEHOLDER-3) (let* [PLACEHOLDER-2 (clojure.core/nth PLACEHOLDER-12 PLACEHOLDER-11)] (do (clojure.core/chunk-append PLACEHOLDER-7 (PLACEHOLDER-8 (Character/getNumericValue PLACEHOLDER-2) PLACEHOLDER-4)) (recur (clojure.core/unchecked-inc PLACEHOLDER-11)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-7) (PLACEHOLDER-1 (clojure.core/chunk-rest PLACEHOLDER-5))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-7) nil))) (let* [PLACEHOLDER-2 (clojure.core/first PLACEHOLDER-5)] (clojure.core/cons (PLACEHOLDER-8 (Character/getNumericValue PLACEHOLDER-2) PLACEHOLDER-4) (PLACEHOLDER-1 (clojure.core/rest PLACEHOLDER-5)))))))))))))] (PLACEHOLDER-0 (str num))))))) (def armstrong? (fn* ([num] (= num (bigint (PLACEHOLDER-6 num (count (str num))))))))))