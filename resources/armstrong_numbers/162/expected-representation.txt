((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-7 (fn* ([num PLACEHOLDER-8] (PLACEHOLDER-13 (PLACEHOLDER-11 num) PLACEHOLDER-8)))) (def PLACEHOLDER-6 (fn* ([num PLACEHOLDER-5] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-9 ([PLACEHOLDER-10] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-10 PLACEHOLDER-10] (let* [PLACEHOLDER-10 (clojure.core/seq PLACEHOLDER-10)] (if PLACEHOLDER-10 (do (if (clojure.core/chunked-seq? PLACEHOLDER-10) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-10) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-1 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-2 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-2 PLACEHOLDER-4) (let* [PLACEHOLDER-3 (clojure.core/nth-12 PLACEHOLDER-2)] (do (clojure.core/chunk-append PLACEHOLDER-1 (PLACEHOLDER-7 (Character/getNumericValue PLACEHOLDER-3) PLACEHOLDER-5)) (recur (clojure.core/unchecked-inc PLACEHOLDER-2)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-1) (PLACEHOLDER-9 (clojure.core/chunk-rest PLACEHOLDER-10))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-1) nil))) (let* [PLACEHOLDER-3 (clojure.core/first PLACEHOLDER-10)] (clojure.core/cons (PLACEHOLDER-7 (Character/getNumericValue PLACEHOLDER-3) PLACEHOLDER-5) (PLACEHOLDER-9 (clojure.core/rest PLACEHOLDER-10)))))))))))))] (PLACEHOLDER-0 (str num))))))) (def armstrong? (fn* ([num] (= num (bigint (PLACEHOLDER-6 num (count (str num))))))))))