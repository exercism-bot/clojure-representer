((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-9 (fn* ([num PLACEHOLDER-10] (PLACEHOLDER-13 (PLACEHOLDER-11 num) PLACEHOLDER-10)))) (def PLACEHOLDER-7 (fn* ([num PLACEHOLDER-6] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-4 ([PLACEHOLDER-3] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-3 PLACEHOLDER-3] (let* [PLACEHOLDER-3 (clojure.core/seq PLACEHOLDER-3)] (if PLACEHOLDER-3 (do (if (clojure.core/chunked-seq? PLACEHOLDER-3) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-3) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-8 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-1 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-1 PLACEHOLDER-5) (let* [PLACEHOLDER-2 (clojure.core/nth-12 PLACEHOLDER-1)] (do (clojure.core/chunk-append PLACEHOLDER-8 (PLACEHOLDER-9 (Character/getNumericValue PLACEHOLDER-2) PLACEHOLDER-6)) (recur (clojure.core/unchecked-inc PLACEHOLDER-1)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-8) (PLACEHOLDER-4 (clojure.core/chunk-rest PLACEHOLDER-3))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-8) nil))) (let* [PLACEHOLDER-2 (clojure.core/first PLACEHOLDER-3)] (clojure.core/cons (PLACEHOLDER-9 (Character/getNumericValue PLACEHOLDER-2) PLACEHOLDER-6) (PLACEHOLDER-4 (clojure.core/rest PLACEHOLDER-3)))))))))))))] (PLACEHOLDER-0 (str num))))))) (def armstrong? (fn* ([num] (= num (bigint (PLACEHOLDER-7 num (count (str num))))))))))