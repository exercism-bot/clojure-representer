((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-9 (fn* ([num PLACEHOLDER-10] (PLACEHOLDER-13 (PLACEHOLDER-11 num) PLACEHOLDER-10)))) (def PLACEHOLDER-8 (fn* ([num PLACEHOLDER-6] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-7 ([PLACEHOLDER-1] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-1 PLACEHOLDER-1] (let* [PLACEHOLDER-1 (clojure.core/seq PLACEHOLDER-1)] (if PLACEHOLDER-1 (do (if (clojure.core/chunked-seq? PLACEHOLDER-1) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-1) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-2 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-3 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-3 PLACEHOLDER-5) (let* [PLACEHOLDER-4 (clojure.core/nth-12 PLACEHOLDER-3)] (do (clojure.core/chunk-append PLACEHOLDER-2 (PLACEHOLDER-9 (Character/getNumericValue PLACEHOLDER-4) PLACEHOLDER-6)) (recur (clojure.core/unchecked-inc PLACEHOLDER-3)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) (PLACEHOLDER-7 (clojure.core/chunk-rest PLACEHOLDER-1))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) nil))) (let* [PLACEHOLDER-4 (clojure.core/first PLACEHOLDER-1)] (clojure.core/cons (PLACEHOLDER-9 (Character/getNumericValue PLACEHOLDER-4) PLACEHOLDER-6) (PLACEHOLDER-7 (clojure.core/rest PLACEHOLDER-1)))))))))))))] (PLACEHOLDER-0 (str num))))))) (def armstrong? (fn* ([num] (= num (bigint (PLACEHOLDER-8 num (count (str num))))))))))