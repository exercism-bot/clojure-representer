((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-2] (loop* [PLACEHOLDER-1 PLACEHOLDER-2 PLACEHOLDER-3 ()] (if (< PLACEHOLDER-1 10) (conj PLACEHOLDER-3 PLACEHOLDER-1) (recur (quot PLACEHOLDER-1 10) (conj PLACEHOLDER-3 (mod PLACEHOLDER-1 10)))))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-2] (count (PLACEHOLDER-5 PLACEHOLDER-2))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-0 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-0))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-2] (reduce + (let* [iter__auto__ (fn* iter ([s] (new clojure.lang.LazySeq (fn* [] (loop* [s s] (let* [s (clojure.core/seq s)] (if s (do (if (clojure.core/chunked-seq? s) (let* [c__auto__ (clojure.core/chunk-first s) size__auto__ (clojure.core/int (clojure.core/count c__auto__)) b (clojure.core/chunk-buffer size__auto__)] (if (loop* [i (clojure.core/int 0)] (if (clojure.core/< i size__auto__) (let* [PLACEHOLDER-0 (clojure.core/nth c__auto__ i)] (do (clojure.core/chunk-append b (PLACEHOLDER-7 PLACEHOLDER-0 (PLACEHOLDER-6 PLACEHOLDER-2))) (recur (clojure.core/unchecked-inc i)))) true)) (clojure.core/chunk-cons (clojure.core/chunk b) (iter (clojure.core/chunk-rest s))) (clojure.core/chunk-cons (clojure.core/chunk b) nil))) (let* [PLACEHOLDER-0 (clojure.core/first s)] (clojure.core/cons (PLACEHOLDER-7 PLACEHOLDER-0 (PLACEHOLDER-6 PLACEHOLDER-2)) (iter (clojure.core/rest s)))))))))))))] (iter__auto__ (PLACEHOLDER-5 PLACEHOLDER-2))))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-2] (= PLACEHOLDER-2 (PLACEHOLDER-8 PLACEHOLDER-2)))))))