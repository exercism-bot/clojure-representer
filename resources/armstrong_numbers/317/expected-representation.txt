((do
  (do
   (clojure.core/in-ns 'armstrong-numbers)
   (if
    (clojure.core/= 'armstrong-numbers 'clojure.core)
    nil
    (do (clojure.core/-add-loaded-lib 'armstrong-numbers) nil)))
  (def
   PLACEHOLDER-4
   (fn*
    ([PLACEHOLDER-1 & PLACEHOLDER-3]
     (if
      (zero? PLACEHOLDER-1)
      PLACEHOLDER-3
      (recur
       (quot PLACEHOLDER-1 10)
       (conj PLACEHOLDER-3 (rem PLACEHOLDER-1 10)))))))
  (def
   PLACEHOLDER-5
   (fn*
    ([PLACEHOLDER-2]
     (let*
      [iter__auto__
       (fn*
        iter
        ([s]
         (new
          clojure.lang.LazySeq
          (fn*
           []
           (loop*
            [s s]
            (let*
             [s (clojure.core/seq s)]
             (if
              s
              (do
               (if
                (clojure.core/chunked-seq? s)
                (let*
                 [c__auto__
                  (clojure.core/chunk-first s)
                  size__auto__
                  (clojure.core/int (clojure.core/count c__auto__))
                  b
                  (clojure.core/chunk-buffer size__auto__)]
                 (if
                  (loop*
                   [i (clojure.core/int 0)]
                   (if
                    (clojure.core/< i size__auto__)
                    (let*
                     [PLACEHOLDER-0 (clojure.core/nth c__auto__ i)]
                     (do
                      (clojure.core/chunk-append
                       b
                       (apply
                        *
                        (repeat (count PLACEHOLDER-2) PLACEHOLDER-0)))
                      (recur (clojure.core/unchecked-inc i))))
                    true))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk b)
                   (iter (clojure.core/chunk-rest s)))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk b)
                   nil)))
                (let*
                 [PLACEHOLDER-0 (clojure.core/first s)]
                 (clojure.core/cons
                  (apply
                   *
                   (repeat (count PLACEHOLDER-2) PLACEHOLDER-0))
                  (iter (clojure.core/rest s)))))))))))))]
      (iter__auto__ PLACEHOLDER-2)))))
  (def
   PLACEHOLDER-6
   (fn*
    ([PLACEHOLDER-1]
     (=
      PLACEHOLDER-1
      (apply + (PLACEHOLDER-5 (PLACEHOLDER-4 PLACEHOLDER-1)))))))))
