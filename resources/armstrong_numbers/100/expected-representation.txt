((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-13 (fn* ([PLACEHOLDER-9] (- (int PLACEHOLDER-9) 48)))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-1))))) (def PLACEHOLDER-3 (fn* ([num] (let* [PLACEHOLDER-2 (str num)] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-12 ([PLACEHOLDER-11] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-11 PLACEHOLDER-11] (let* [PLACEHOLDER-11 (clojure.core/seq PLACEHOLDER-11)] (if PLACEHOLDER-11 (do (if (clojure.core/chunked-seq? PLACEHOLDER-11) (let* [PLACEHOLDER-10 (clojure.core/chunk-first PLACEHOLDER-11) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-10)) PLACEHOLDER-6 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-5 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-5 PLACEHOLDER-4) (let* [PLACEHOLDER-9 (clojure.core/nth-10 PLACEHOLDER-5)] (do (clojure.core/chunk-append PLACEHOLDER-6 (PLACEHOLDER-8 (PLACEHOLDER-13 PLACEHOLDER-9) (count PLACEHOLDER-2))) (recur (clojure.core/unchecked-inc PLACEHOLDER-5)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) (PLACEHOLDER-12 (clojure.core/chunk-rest PLACEHOLDER-11))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) nil))) (let* [PLACEHOLDER-9 (clojure.core/first PLACEHOLDER-11)] (clojure.core/cons (PLACEHOLDER-8 (PLACEHOLDER-13 PLACEHOLDER-9) (count PLACEHOLDER-2)) (PLACEHOLDER-12 (clojure.core/rest PLACEHOLDER-11)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-2))))))) (def armstrong? (fn* ([num] (= (PLACEHOLDER-3 num) num))))))