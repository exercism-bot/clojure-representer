((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-13 (fn* ([PLACEHOLDER-11] (- (int PLACEHOLDER-11) 48)))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-1 PLACEHOLDER-8] (reduce * (repeat PLACEHOLDER-8 PLACEHOLDER-1))))) (def PLACEHOLDER-3 (fn* ([num] (let* [PLACEHOLDER-2 (str num)] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-7 ([PLACEHOLDER-5] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-5 PLACEHOLDER-5] (let* [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-5)] (if PLACEHOLDER-5 (do (if (clojure.core/chunked-seq? PLACEHOLDER-5) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-5) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-6 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-10 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-10 PLACEHOLDER-4) (let* [PLACEHOLDER-11 (clojure.core/nth-12 PLACEHOLDER-10)] (do (clojure.core/chunk-append PLACEHOLDER-6 (PLACEHOLDER-9 (PLACEHOLDER-13 PLACEHOLDER-11) (count PLACEHOLDER-2))) (recur (clojure.core/unchecked-inc PLACEHOLDER-10)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) (PLACEHOLDER-7 (clojure.core/chunk-rest PLACEHOLDER-5))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) nil))) (let* [PLACEHOLDER-11 (clojure.core/first PLACEHOLDER-5)] (clojure.core/cons (PLACEHOLDER-9 (PLACEHOLDER-13 PLACEHOLDER-11) (count PLACEHOLDER-2)) (PLACEHOLDER-7 (clojure.core/rest PLACEHOLDER-5)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-2))))))) (def armstrong? (fn* ([num] (= (PLACEHOLDER-3 num) num))))))