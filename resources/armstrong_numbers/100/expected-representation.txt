((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (- (int PLACEHOLDER-0) 48)))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-2 PLACEHOLDER-2] (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-2))))) (def PLACEHOLDER-3 (fn* ([num] (let* [PLACEHOLDER-3 (str num)] (reduce + (let* [PLACEHOLDER-4 (fn* PLACEHOLDER-4 ([PLACEHOLDER-4] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-4 PLACEHOLDER-4] (let* [PLACEHOLDER-4 (clojure.core/seq PLACEHOLDER-4)] (if PLACEHOLDER-4 (do (if (clojure.core/chunked-seq? PLACEHOLDER-4) (let* [PLACEHOLDER-5 (clojure.core/chunk-first PLACEHOLDER-4) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-5)) PLACEHOLDER-5 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-6 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-6 PLACEHOLDER-5) (let* [PLACEHOLDER-0 (clojure.core/nth-12 PLACEHOLDER-6)] (do (clojure.core/chunk-append PLACEHOLDER-5 (PLACEHOLDER-1 (PLACEHOLDER-0 PLACEHOLDER-0) (count PLACEHOLDER-3))) (recur (clojure.core/unchecked-inc PLACEHOLDER-6)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) (PLACEHOLDER-4 (clojure.core/chunk-rest PLACEHOLDER-4))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) nil))) (let* [PLACEHOLDER-0 (clojure.core/first PLACEHOLDER-4)] (clojure.core/cons (PLACEHOLDER-1 (PLACEHOLDER-0 PLACEHOLDER-0) (count PLACEHOLDER-3)) (PLACEHOLDER-4 (clojure.core/rest PLACEHOLDER-4)))))))))))))] (PLACEHOLDER-4 PLACEHOLDER-3))))))) (def armstrong? (fn* ([num] (= (PLACEHOLDER-3 num) num))))))