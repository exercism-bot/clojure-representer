((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-12 (fn* ([PLACEHOLDER-9] (- (int PLACEHOLDER-9) 48)))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-1 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-1))))) (def PLACEHOLDER-4 (fn* ([num] (let* [PLACEHOLDER-3 (str num)] (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-11 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-10 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-10)) PLACEHOLDER-13 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-7 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-7 PLACEHOLDER-5) (let* [PLACEHOLDER-9 (clojure.core/nth-10 PLACEHOLDER-7)] (do (clojure.core/chunk-append PLACEHOLDER-13 (PLACEHOLDER-8 (PLACEHOLDER-12 PLACEHOLDER-9) (count PLACEHOLDER-3))) (recur (clojure.core/unchecked-inc PLACEHOLDER-7)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-13) (PLACEHOLDER-11 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-13) nil))) (let* [PLACEHOLDER-9 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (PLACEHOLDER-8 (PLACEHOLDER-12 PLACEHOLDER-9) (count PLACEHOLDER-3)) (PLACEHOLDER-11 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-3))))))) (def armstrong? (fn* ([num] (= (PLACEHOLDER-4 num) num))))))