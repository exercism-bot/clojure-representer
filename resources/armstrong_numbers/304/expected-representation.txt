((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([num PLACEHOLDER-3] (if (< num 1) PLACEHOLDER-3 (recur (/ num 10) (inc PLACEHOLDER-3)))) ([num] (PLACEHOLDER-8 num 0)))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-0 PLACEHOLDER-5] (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-0))))) (def PLACEHOLDER-10 (fn* ([num PLACEHOLDER-9] (PLACEHOLDER-10 num 0 PLACEHOLDER-9)) ([num PLACEHOLDER-7 PLACEHOLDER-9] (if (< num 1) PLACEHOLDER-7 (let* [PLACEHOLDER-1 (mod num 10) PLACEHOLDER-11 (quot num 10) PLACEHOLDER-4 (PLACEHOLDER-6 PLACEHOLDER-1 PLACEHOLDER-9) PLACEHOLDER-2 (+' PLACEHOLDER-7 PLACEHOLDER-4)] (recur PLACEHOLDER-11 PLACEHOLDER-2 PLACEHOLDER-9)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-9 (PLACEHOLDER-8 num) PLACEHOLDER-10 (PLACEHOLDER-10 num PLACEHOLDER-9)] (== num PLACEHOLDER-10)))))))