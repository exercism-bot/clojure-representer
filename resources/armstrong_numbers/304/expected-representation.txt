((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num PLACEHOLDER-0] (if (< num 1) PLACEHOLDER-0 (recur (/ num 10) (inc PLACEHOLDER-0)))) ([num] (PLACEHOLDER-0 num 0)))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-3 PLACEHOLDER-3] (reduce * (repeat PLACEHOLDER-3 PLACEHOLDER-3))))) (def PLACEHOLDER-4 (fn* ([num PLACEHOLDER-5] (PLACEHOLDER-4 num 0 PLACEHOLDER-5)) ([num PLACEHOLDER-6 PLACEHOLDER-5] (if (< num 1) PLACEHOLDER-6 (let* [PLACEHOLDER-7 (mod num 10) PLACEHOLDER-8 (quot num 10) PLACEHOLDER-8 (PLACEHOLDER-2 PLACEHOLDER-7 PLACEHOLDER-5) PLACEHOLDER-9 (+' PLACEHOLDER-6 PLACEHOLDER-8)] (recur PLACEHOLDER-8 PLACEHOLDER-9 PLACEHOLDER-5)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-0 num) PLACEHOLDER-4 (PLACEHOLDER-4 num PLACEHOLDER-5)] (== num PLACEHOLDER-4)))))))