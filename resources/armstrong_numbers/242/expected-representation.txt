((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] "Takes a number and returns a vector of its digits" (if (< PLACEHOLDER-0 10) [PLACEHOLDER-0] (conj (PLACEHOLDER-0 (quot PLACEHOLDER-0 10)) (rem PLACEHOLDER-0 10)))))) (def PLACEHOLDER-2 (fn* ([num PLACEHOLDER-2] (reduce * (repeat PLACEHOLDER-2 num))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-3 num] (reduce + (map (fn* [PLACEHOLDER-3] (PLACEHOLDER-2 PLACEHOLDER-3 PLACEHOLDER-3)) (PLACEHOLDER-0 num)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-3 (count (PLACEHOLDER-0 num))] (if (= num (PLACEHOLDER-3 PLACEHOLDER-3 num)) true false)))))))