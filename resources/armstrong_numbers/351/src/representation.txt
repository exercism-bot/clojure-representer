(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-3]
    (clojure.lang.Numbers/minus
     (clojure.lang.RT/intCast PLACEHOLDER-3)
     (clojure.lang.RT/intCast \0)))))
 (def
  PLACEHOLDER-13
  (fn* ([PLACEHOLDER-4] (map PLACEHOLDER-12 (str PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6]
    (reduce
     +
     (map
      (fn*
       ([PLACEHOLDER-7] (PLACEHOLDER-11 PLACEHOLDER-7 PLACEHOLDER-6)))
      PLACEHOLDER-5)))))
 (def
  PLACEHOLDER-15
  (fn*
   ([PLACEHOLDER-8]
    (let*
     [PLACEHOLDER-9
      (PLACEHOLDER-13 PLACEHOLDER-8)
      PLACEHOLDER-10
      (clojure.lang.RT/count PLACEHOLDER-9)]
     (clojure.lang.Util/equiv
      PLACEHOLDER-8
      (PLACEHOLDER-14 PLACEHOLDER-9 PLACEHOLDER-10)))))))
