((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-4 (count (str num))] (= num (reduce + 0 (map (fn* [PLACEHOLDER-6] (apply * (repeat PLACEHOLDER-4 PLACEHOLDER-6))) (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-1 ([PLACEHOLDER-7] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-7 PLACEHOLDER-7] (let* [PLACEHOLDER-7 (clojure.core/seq PLACEHOLDER-7)] (if PLACEHOLDER-7 (do (if (clojure.core/chunked-seq? PLACEHOLDER-7) (let* [PLACEHOLDER-8 (clojure.core/chunk-first PLACEHOLDER-7) PLACEHOLDER-2 (clojure.core/int (clojure.core/count PLACEHOLDER-8)) PLACEHOLDER-5 (clojure.core/chunk-buffer PLACEHOLDER-2)] (if (loop* [PLACEHOLDER-3 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-3 PLACEHOLDER-2) (let* [PLACEHOLDER-4 (clojure.core/nth PLACEHOLDER-8 PLACEHOLDER-3)] (do (clojure.core/chunk-append PLACEHOLDER-5 (- (byte PLACEHOLDER-4) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-3)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) (PLACEHOLDER-1 (clojure.core/chunk-rest PLACEHOLDER-7))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) nil))) (let* [PLACEHOLDER-4 (clojure.core/first PLACEHOLDER-7)] (clojure.core/cons (- (byte PLACEHOLDER-4) 48) (PLACEHOLDER-1 (clojure.core/rest PLACEHOLDER-7)))))))))))))] (PLACEHOLDER-0 (str num))))))))))))