((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (count (str num))] (= num (reduce + 0 (map (fn* [PLACEHOLDER-5] (apply * (repeat PLACEHOLDER-6 PLACEHOLDER-5))) (let* [PLACEHOLDER-1 (fn* PLACEHOLDER-7 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-8 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-3 (clojure.core/int (clojure.core/count PLACEHOLDER-8)) PLACEHOLDER-0 (clojure.core/chunk-buffer PLACEHOLDER-3)] (if (loop* [PLACEHOLDER-4 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-4 PLACEHOLDER-3) (let* [PLACEHOLDER-6 (clojure.core/nth PLACEHOLDER-8 PLACEHOLDER-4)] (do (clojure.core/chunk-append PLACEHOLDER-0 (- (byte PLACEHOLDER-6) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-4)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-0) (PLACEHOLDER-7 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-0) nil))) (let* [PLACEHOLDER-6 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (- (byte PLACEHOLDER-6) 48) (PLACEHOLDER-7 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-1 (str num))))))))))))