((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-3 (count (str num))] (= num (reduce + 0 (map (fn* [PLACEHOLDER-4] (apply * (repeat PLACEHOLDER-3 PLACEHOLDER-4))) (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-1 ([PLACEHOLDER-6] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-6 PLACEHOLDER-6] (let* [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-6)] (if PLACEHOLDER-6 (do (if (clojure.core/chunked-seq? PLACEHOLDER-6) (let* [PLACEHOLDER-7 (clojure.core/chunk-first PLACEHOLDER-6) PLACEHOLDER-2 (clojure.core/int (clojure.core/count PLACEHOLDER-7)) PLACEHOLDER-5 (clojure.core/chunk-buffer PLACEHOLDER-2)] (if (loop* [PLACEHOLDER-8 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-8 PLACEHOLDER-2) (let* [PLACEHOLDER-3 (clojure.core/nth-7 PLACEHOLDER-8)] (do (clojure.core/chunk-append PLACEHOLDER-5 (- (byte PLACEHOLDER-3) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-8)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) (PLACEHOLDER-1 (clojure.core/chunk-rest PLACEHOLDER-6))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) nil))) (let* [PLACEHOLDER-3 (clojure.core/first PLACEHOLDER-6)] (clojure.core/cons (- (byte PLACEHOLDER-3) 48) (PLACEHOLDER-1 (clojure.core/rest PLACEHOLDER-6)))))))))))))] (PLACEHOLDER-0 (str num))))))))))))