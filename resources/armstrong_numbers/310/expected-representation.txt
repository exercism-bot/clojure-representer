((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([num] (loop* [PLACEHOLDER-1 num PLACEHOLDER-5 []] (if (> PLACEHOLDER-1 0) (recur (quot PLACEHOLDER-1 10) (concat [(mod PLACEHOLDER-1 10)] PLACEHOLDER-5)) PLACEHOLDER-5))))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-0 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-0))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-5] (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-4 PLACEHOLDER-7 (count PLACEHOLDER-5))) PLACEHOLDER-5))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-3 num)] (= num (PLACEHOLDER-2 PLACEHOLDER-5))))))))