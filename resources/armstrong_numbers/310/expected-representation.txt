((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (loop* [PLACEHOLDER-2 num PLACEHOLDER-6 []] (if (> PLACEHOLDER-2 0) (recur (quot PLACEHOLDER-2 10) (concat [(mod PLACEHOLDER-2 10)] PLACEHOLDER-6)) PLACEHOLDER-6))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0 PLACEHOLDER-7] (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-0))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-6] (reduce + (map (fn* [PLACEHOLDER-1] (PLACEHOLDER-5 PLACEHOLDER-1 (count PLACEHOLDER-6))) PLACEHOLDER-6))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-4 num)] (= num (PLACEHOLDER-3 PLACEHOLDER-6))))))))