((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (loop* [PLACEHOLDER-0 num PLACEHOLDER-1 []] (if (> PLACEHOLDER-0 0) (recur (quot PLACEHOLDER-0 10) (concat [(mod PLACEHOLDER-0 10)] PLACEHOLDER-1)) PLACEHOLDER-1))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-3 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-3))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-1] (reduce + (map (fn* [PLACEHOLDER-5] (PLACEHOLDER-3 PLACEHOLDER-5 (count PLACEHOLDER-1))) PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-1 (PLACEHOLDER-0 num)] (= num (PLACEHOLDER-5 PLACEHOLDER-1))))))))