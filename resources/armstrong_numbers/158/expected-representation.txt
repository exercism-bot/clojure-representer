((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-2 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-2))))) (def PLACEHOLDER-4 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-10 ([PLACEHOLDER-1] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-1 PLACEHOLDER-1] (let* [PLACEHOLDER-1 (clojure.core/seq PLACEHOLDER-1)] (if PLACEHOLDER-1 (do (if (clojure.core/chunked-seq? PLACEHOLDER-1) (let* [PLACEHOLDER-9 (clojure.core/chunk-first PLACEHOLDER-1) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-9)) PLACEHOLDER-11 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-3 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-3 PLACEHOLDER-5) (let* [PLACEHOLDER-6 (clojure.core/nth-9 PLACEHOLDER-3)] (do (clojure.core/chunk-append PLACEHOLDER-11 (- (byte PLACEHOLDER-6) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-3)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-11) (PLACEHOLDER-10 (clojure.core/chunk-rest PLACEHOLDER-1))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-11) nil))) (let* [PLACEHOLDER-6 (clojure.core/first PLACEHOLDER-1)] (clojure.core/cons (- (byte PLACEHOLDER-6) 48) (PLACEHOLDER-10 (clojure.core/rest PLACEHOLDER-1)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-8 (PLACEHOLDER-4 num)] (== num (reduce + (map (fn* ([PLACEHOLDER-2] (PLACEHOLDER-7 PLACEHOLDER-2 (count PLACEHOLDER-8)))) PLACEHOLDER-8)))))))))