((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-1 PLACEHOLDER-5] (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-1))))) (def PLACEHOLDER-3 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-7 ([PLACEHOLDER-10] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-10 PLACEHOLDER-10] (let* [PLACEHOLDER-10 (clojure.core/seq PLACEHOLDER-10)] (if PLACEHOLDER-10 (do (if (clojure.core/chunked-seq? PLACEHOLDER-10) (let* [PLACEHOLDER-11 (clojure.core/chunk-first PLACEHOLDER-10) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-11)) PLACEHOLDER-2 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-8 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-8 PLACEHOLDER-4) (let* [PLACEHOLDER-5 (clojure.core/nth-11 PLACEHOLDER-8)] (do (clojure.core/chunk-append PLACEHOLDER-2 (- (byte PLACEHOLDER-5) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-8)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) (PLACEHOLDER-7 (clojure.core/chunk-rest PLACEHOLDER-10))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) nil))) (let* [PLACEHOLDER-5 (clojure.core/first PLACEHOLDER-10)] (clojure.core/cons (- (byte PLACEHOLDER-5) 48) (PLACEHOLDER-7 (clojure.core/rest PLACEHOLDER-10)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-9 (PLACEHOLDER-3 num)] (== num (reduce + (map (fn* ([PLACEHOLDER-1] (PLACEHOLDER-6 PLACEHOLDER-1 (count PLACEHOLDER-9)))) PLACEHOLDER-9)))))))))