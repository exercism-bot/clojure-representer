((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-0))))) (def PLACEHOLDER-1 (fn* ([num] (let* [PLACEHOLDER-2 (fn* PLACEHOLDER-2 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-5 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-5)) PLACEHOLDER-5 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-6 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-6 PLACEHOLDER-5) (let* [PLACEHOLDER-1 (clojure.core/nth-11 PLACEHOLDER-6)] (do (clojure.core/chunk-append PLACEHOLDER-5 (- (byte PLACEHOLDER-1) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-6)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) (PLACEHOLDER-2 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (- (byte PLACEHOLDER-1) 48) (PLACEHOLDER-2 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-2 (str num)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-10 (PLACEHOLDER-1 num)] (== num (reduce + (map (fn* ([PLACEHOLDER-0] (PLACEHOLDER-0 PLACEHOLDER-0 (count PLACEHOLDER-10)))) PLACEHOLDER-10)))))))))