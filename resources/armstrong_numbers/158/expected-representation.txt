((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (reduce * (repeat PLACEHOLDER-7 PLACEHOLDER-1))))) (def PLACEHOLDER-4 (fn* ([num] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-2 ([PLACEHOLDER-9] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-9 PLACEHOLDER-9] (let* [PLACEHOLDER-9 (clojure.core/seq PLACEHOLDER-9)] (if PLACEHOLDER-9 (do (if (clojure.core/chunked-seq? PLACEHOLDER-9) (let* [PLACEHOLDER-11 (clojure.core/chunk-first PLACEHOLDER-9) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-11)) PLACEHOLDER-3 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-6 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-6 PLACEHOLDER-5) (let* [PLACEHOLDER-7 (clojure.core/nth-11 PLACEHOLDER-6)] (do (clojure.core/chunk-append PLACEHOLDER-3 (- (byte PLACEHOLDER-7) 48)) (recur (clojure.core/unchecked-inc PLACEHOLDER-6)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-3) (PLACEHOLDER-2 (clojure.core/chunk-rest PLACEHOLDER-9))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-3) nil))) (let* [PLACEHOLDER-7 (clojure.core/first PLACEHOLDER-9)] (clojure.core/cons (- (byte PLACEHOLDER-7) 48) (PLACEHOLDER-2 (clojure.core/rest PLACEHOLDER-9)))))))))))))] (PLACEHOLDER-0 (str num)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-10 (PLACEHOLDER-4 num)] (== num (reduce + (map (fn* ([PLACEHOLDER-1] (PLACEHOLDER-8 PLACEHOLDER-1 (count PLACEHOLDER-10)))) PLACEHOLDER-10)))))))))