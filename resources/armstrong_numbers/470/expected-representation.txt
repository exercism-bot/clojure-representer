((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (if (= PLACEHOLDER-0 0) 1 (* PLACEHOLDER-0 (PLACEHOLDER-0 PLACEHOLDER-0 (dec PLACEHOLDER-0))))))) (def PLACEHOLDER-3 (fn* ([num] (PLACEHOLDER-3 num (quote ()))) ([num PLACEHOLDER-4] (if (= num 0) PLACEHOLDER-4 (recur (long (/ num 10)) (cons (mod num 10) PLACEHOLDER-4)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-3 num) PLACEHOLDER-5 (map (fn* ([PLACEHOLDER-6] (PLACEHOLDER-0 PLACEHOLDER-6 (count PLACEHOLDER-5)))) PLACEHOLDER-5) PLACEHOLDER-8 (reduce + PLACEHOLDER-5)] (= PLACEHOLDER-8 num)))))))