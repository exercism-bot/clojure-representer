((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.math :as PLACEHOLDER-0])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-1] (int (inc (PLACEHOLDER-2 PLACEHOLDER-1)))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-1 PLACEHOLDER-4] (loop* [num (bigint PLACEHOLDER-1) PLACEHOLDER-4 PLACEHOLDER-4 PLACEHOLDER-4 1] (if (<= PLACEHOLDER-4 0) PLACEHOLDER-4 (recur num (dec PLACEHOLDER-4) (* PLACEHOLDER-4 num))))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-1 PLACEHOLDER-6] (loop* [num (bigint PLACEHOLDER-1) PLACEHOLDER-4 PLACEHOLDER-6 PLACEHOLDER-8 (bigint 0)] (if (<= num 0) PLACEHOLDER-8 (recur (bigint (/ num 10)) PLACEHOLDER-4 (+ PLACEHOLDER-8 (PLACEHOLDER-3 (mod num 10) PLACEHOLDER-4)))))))) (def armstrong? (fn* ([PLACEHOLDER-8] (if (< PLACEHOLDER-8 10) true (= PLACEHOLDER-8 (PLACEHOLDER-6 PLACEHOLDER-8 (PLACEHOLDER-0 PLACEHOLDER-8)))))))))