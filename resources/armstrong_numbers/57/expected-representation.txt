((do
  (do
   (clojure.core/in-ns 'armstrong-numbers)
   (if
    (clojure.core/= 'armstrong-numbers 'clojure.core)
    PLACEHOLDER-0
    (do
     (clojure.core/-add-loaded-lib 'armstrong-numbers)
     PLACEHOLDER-0)))
  (def
   PLACEHOLDER-4
   (fn*
    ([PLACEHOLDER-2]
     (let*
      [PLACEHOLDER-3
       (map (fn* [p1#] (Character/digit p1# 10)) (str PLACEHOLDER-2))]
      (==
       PLACEHOLDER-2
       (apply
        +
        (let*
         [iter__auto__
          (fn*
           iter
           ([s]
            (new
             clojure.lang.LazySeq
             (fn*
              []
              (loop*
               [s s]
               (let*
                [s (clojure.core/seq s)]
                (if
                 s
                 (do
                  (if
                   (clojure.core/chunked-seq? s)
                   (let*
                    [c__auto__
                     (clojure.core/chunk-first s)
                     size__auto__
                     (clojure.core/int (clojure.core/count c__auto__))
                     b
                     (clojure.core/chunk-buffer size__auto__)]
                    (if
                     (loop*
                      [i (clojure.core/int 0)]
                      (if
                       (clojure.core/< i size__auto__)
                       (let*
                        [PLACEHOLDER-1 (clojure.core/nth c__auto__ i)]
                        (do
                         (clojure.core/chunk-append
                          b
                          (bigint
                           (Math/pow
                            PLACEHOLDER-1
                            (count PLACEHOLDER-3))))
                         (recur (clojure.core/unchecked-inc i))))
                       true))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk b)
                      (iter (clojure.core/chunk-rest s)))
                     (clojure.core/chunk-cons
                      (clojure.core/chunk b)
                      PLACEHOLDER-0)))
                   (let*
                    [PLACEHOLDER-1 (clojure.core/first s)]
                    (clojure.core/cons
                     (bigint
                      (Math/pow PLACEHOLDER-1 (count PLACEHOLDER-3)))
                     (iter (clojure.core/rest s)))))))))))))]
         (iter__auto__ PLACEHOLDER-3))))))))))
