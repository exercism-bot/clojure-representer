((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (loop* [PLACEHOLDER-0 num PLACEHOLDER-1 []] (if (<= PLACEHOLDER-0 0) PLACEHOLDER-1 (recur (/ (- PLACEHOLDER-0 (rem PLACEHOLDER-0 10)) 10) (conj PLACEHOLDER-1 (rem PLACEHOLDER-0 10)))))))) (def PLACEHOLDER-3 (fn* ([num] (let* [PLACEHOLDER-4 (PLACEHOLDER-0 num) PLACEHOLDER-5 (count PLACEHOLDER-4)] (reduce (fn* ([PLACEHOLDER-6 PLACEHOLDER-6] (+ (PLACEHOLDER-7 PLACEHOLDER-6 PLACEHOLDER-5) (PLACEHOLDER-7 PLACEHOLDER-6 PLACEHOLDER-5)))) PLACEHOLDER-4))))) (def armstrong? (fn* ([num] (if (= (int (PLACEHOLDER-3 num)) num) true false))))))