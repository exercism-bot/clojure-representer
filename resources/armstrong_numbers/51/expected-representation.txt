((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (loop* [PLACEHOLDER-1 PLACEHOLDER-0 PLACEHOLDER-2 (quote ())] (if (zero? PLACEHOLDER-1) PLACEHOLDER-2 (recur (quot PLACEHOLDER-1 10) (conj PLACEHOLDER-2 (mod PLACEHOLDER-1 10)))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-4 PLACEHOLDER-0] (reduce * (repeat PLACEHOLDER-0 PLACEHOLDER-4))))) (def armstrong? (fn* ([num] "An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits." (let* [PLACEHOLDER-6 (count (str num))] (= num (reduce + (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-3 PLACEHOLDER-6 PLACEHOLDER-6)) (PLACEHOLDER-0 num))))))))))