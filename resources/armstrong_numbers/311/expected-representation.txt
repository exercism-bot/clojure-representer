((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (PLACEHOLDER-0 num [] 10)) ([num PLACEHOLDER-1 PLACEHOLDER-1] (let* [PLACEHOLDER-1 (mod num PLACEHOLDER-1)] (if (pos? num) (PLACEHOLDER-0 (- num PLACEHOLDER-1) (conj PLACEHOLDER-1 (/ PLACEHOLDER-1 (/ PLACEHOLDER-1 10))) (* PLACEHOLDER-1 10)) PLACEHOLDER-1))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-6 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-6))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-7 (PLACEHOLDER-0 num) PLACEHOLDER-8 (count PLACEHOLDER-7)] (if (= num 0) true (= num (apply + (map (fn* [PLACEHOLDER-8] (PLACEHOLDER-5 PLACEHOLDER-8 PLACEHOLDER-8)) PLACEHOLDER-7))))))))))