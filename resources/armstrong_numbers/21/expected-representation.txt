((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (do (def PLACEHOLDER-6)) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-0 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-0))))) (def armstrong? (fn* ([num] (= (bigint num) (bigint (PLACEHOLDER-6 num)))))) (def PLACEHOLDER-6 (fn* ([num] (let* [PLACEHOLDER-5 (count (str num))] (PLACEHOLDER-6 num PLACEHOLDER-5 PLACEHOLDER-5 0))) ([num PLACEHOLDER-5 PLACEHOLDER-1 PLACEHOLDER-3] (let* [PLACEHOLDER-1 (dec PLACEHOLDER-1) PLACEHOLDER-3 (+ PLACEHOLDER-3 (long (PLACEHOLDER-2 (mod num 10) PLACEHOLDER-5)))] (if (zero? PLACEHOLDER-1) PLACEHOLDER-3 (recur (long (/ num 10)) PLACEHOLDER-5 PLACEHOLDER-1 PLACEHOLDER-3))))))))