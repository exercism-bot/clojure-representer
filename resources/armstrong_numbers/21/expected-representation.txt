((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (do (def PLACEHOLDER-0)) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-1 PLACEHOLDER-1] (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (= (bigint num) (bigint (PLACEHOLDER-0 num)))))) (def PLACEHOLDER-0 (fn* ([num] (let* [PLACEHOLDER-2 (count (str num))] (PLACEHOLDER-0 num PLACEHOLDER-2 PLACEHOLDER-2 0))) ([num PLACEHOLDER-2 PLACEHOLDER-3 PLACEHOLDER-4] (let* [PLACEHOLDER-3 (dec PLACEHOLDER-3) PLACEHOLDER-4 (+ PLACEHOLDER-4 (long (PLACEHOLDER-0 (mod num 10) PLACEHOLDER-2)))] (if (zero? PLACEHOLDER-3) PLACEHOLDER-4 (recur (long (/ num 10)) PLACEHOLDER-2 PLACEHOLDER-3 PLACEHOLDER-4))))))))