((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-1 1)) ([PLACEHOLDER-0 PLACEHOLDER-1 PLACEHOLDER-2] (if (zero? PLACEHOLDER-1) PLACEHOLDER-2 (recur PLACEHOLDER-0 (dec PLACEHOLDER-1) (* PLACEHOLDER-0 PLACEHOLDER-2)))))) (def PLACEHOLDER-5 (fn* [PLACEHOLDER-5] (- (int PLACEHOLDER-5) (int \0)))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (str num) PLACEHOLDER-6 (count PLACEHOLDER-6)] (= num (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-0 PLACEHOLDER-7 PLACEHOLDER-6)) (map PLACEHOLDER-5 PLACEHOLDER-6))))))))))