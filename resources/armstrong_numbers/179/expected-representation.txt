((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num PLACEHOLDER-0] (loop* [PLACEHOLDER-1 num PLACEHOLDER-1 PLACEHOLDER-0] (if (= PLACEHOLDER-1 1) PLACEHOLDER-1 (recur (* PLACEHOLDER-1 num) (dec PLACEHOLDER-1))))))) (def PLACEHOLDER-3 (fn* ([num] (count (PLACEHOLDER-4 num))))) (def PLACEHOLDER-4 (fn* ([num] (loop* [PLACEHOLDER-1 [] PLACEHOLDER-4 (bigint (/ num 10)) PLACEHOLDER-4 (mod num 10)] (if (< PLACEHOLDER-4 1) (conj PLACEHOLDER-1 PLACEHOLDER-4) (recur (cons PLACEHOLDER-4 PLACEHOLDER-1) (bigint (/ PLACEHOLDER-4 10)) (mod PLACEHOLDER-4 10))))))) (def PLACEHOLDER-7 (fn* ([num] (let* [PLACEHOLDER-4 (PLACEHOLDER-4 num) PLACEHOLDER-7 (count PLACEHOLDER-4)] (reduce + (map (fn* [PLACEHOLDER-8] (PLACEHOLDER-0 PLACEHOLDER-8 PLACEHOLDER-7)) PLACEHOLDER-4)))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-7 num)))))))