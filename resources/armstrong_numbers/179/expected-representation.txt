((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-2 (fn* ([num PLACEHOLDER-6] (loop* [PLACEHOLDER-4 num PLACEHOLDER-8 PLACEHOLDER-6] (if (= PLACEHOLDER-8 1) PLACEHOLDER-4 (recur (* PLACEHOLDER-4 num) (dec PLACEHOLDER-8))))))) (def PLACEHOLDER-9 (fn* ([num] (count (PLACEHOLDER-10 num))))) (def PLACEHOLDER-7 (fn* ([num] (loop* [PLACEHOLDER-4 [] PLACEHOLDER-3 (bigint (/ num 10)) PLACEHOLDER-5 (mod num 10)] (if (< PLACEHOLDER-3 1) (conj PLACEHOLDER-4 PLACEHOLDER-5) (recur (cons PLACEHOLDER-5 PLACEHOLDER-4) (bigint (/ PLACEHOLDER-3 10)) (mod PLACEHOLDER-3 10))))))) (def PLACEHOLDER-0 (fn* ([num] (let* [PLACEHOLDER-7 (PLACEHOLDER-7 num) PLACEHOLDER-11 (count PLACEHOLDER-7)] (reduce + (map (fn* [PLACEHOLDER-1] (PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-11)) PLACEHOLDER-7)))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-0 num)))))))