((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-1 (fn* ([num PLACEHOLDER-5] (loop* [PLACEHOLDER-3 num PLACEHOLDER-7 PLACEHOLDER-5] (if (= PLACEHOLDER-7 1) PLACEHOLDER-3 (recur (* PLACEHOLDER-3 num) (dec PLACEHOLDER-7))))))) (def PLACEHOLDER-8 (fn* ([num] (count (PLACEHOLDER-10 num))))) (def PLACEHOLDER-6 (fn* ([num] (loop* [PLACEHOLDER-3 [] PLACEHOLDER-2 (bigint (/ num 10)) PLACEHOLDER-4 (mod num 10)] (if (< PLACEHOLDER-2 1) (conj PLACEHOLDER-3 PLACEHOLDER-4) (recur (cons PLACEHOLDER-4 PLACEHOLDER-3) (bigint (/ PLACEHOLDER-2 10)) (mod PLACEHOLDER-2 10))))))) (def PLACEHOLDER-0 (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-6 num) PLACEHOLDER-11 (count PLACEHOLDER-6)] (reduce + (map (fn* [PLACEHOLDER-9] (PLACEHOLDER-1 PLACEHOLDER-9 PLACEHOLDER-11)) PLACEHOLDER-6)))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-0 num)))))))