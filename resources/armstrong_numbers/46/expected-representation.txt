((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] "`b` raised to the power of `n`" (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-0))))) (def PLACEHOLDER-2 (fn* ([num] (let* [PLACEHOLDER-3 (map (fn* [PLACEHOLDER-3] (Character/digit PLACEHOLDER-3 10)) (map char (str num))) PLACEHOLDER-4 (count PLACEHOLDER-3)] (reduce + (map (fn* [PLACEHOLDER-5] (PLACEHOLDER-0 PLACEHOLDER-5 PLACEHOLDER-4)) PLACEHOLDER-3)))))) (def armstrong? (fn* ([num] (if (= num (PLACEHOLDER-2 num)) true false))))))