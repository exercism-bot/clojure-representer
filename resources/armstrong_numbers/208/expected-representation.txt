((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (if (neg? num) (let* [PLACEHOLDER-1 (PLACEHOLDER-4 (- num)) PLACEHOLDER-2 (#object[clojure.core$seq "clojure.core$seq"] PLACEHOLDER-1) PLACEHOLDER-7 (#object[clojure.core$first "clojure.core$first"] PLACEHOLDER-2) PLACEHOLDER-2 (#object[clojure.core$next "clojure.core$next"] PLACEHOLDER-2) PLACEHOLDER-9 PLACEHOLDER-7 rest PLACEHOLDER-2] (cons (- PLACEHOLDER-9) rest)) (if :else (loop* [PLACEHOLDER-0 num PLACEHOLDER-5 (quote ())] (if (zero? PLACEHOLDER-0) PLACEHOLDER-5 (recur (quot PLACEHOLDER-0 10) (cons (mod PLACEHOLDER-0 10) PLACEHOLDER-5)))) nil))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-0 PLACEHOLDER-3] (loop* [PLACEHOLDER-8 1 PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-3 PLACEHOLDER-3] (if (zero? PLACEHOLDER-3) PLACEHOLDER-8 (if (even? PLACEHOLDER-3) (recur PLACEHOLDER-8 (* PLACEHOLDER-0 PLACEHOLDER-0) (quot PLACEHOLDER-3 2)) (if :else (recur (* PLACEHOLDER-8 PLACEHOLDER-0) PLACEHOLDER-0 (dec PLACEHOLDER-3)) nil))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-4 num) PLACEHOLDER-3 (count PLACEHOLDER-5)] (= num (transduce (map (fn* ([PLACEHOLDER-0] (PLACEHOLDER-6 PLACEHOLDER-0 PLACEHOLDER-3)))) + PLACEHOLDER-5))))))))