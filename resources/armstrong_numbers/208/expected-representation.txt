((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([num] (if (neg? num) (let* [PLACEHOLDER-2 (PLACEHOLDER-5 (- num)) PLACEHOLDER-1 (#object[clojure.core$seq "clojure.core$seq"] PLACEHOLDER-2) PLACEHOLDER-3 (#object[clojure.core$first 0x872db30 "clojure.core$first"] PLACEHOLDER-1) PLACEHOLDER-1 (#object[clojure.core$next__5451 0x149b60e6 "clojure.core$next__5451@149b60e6"] PLACEHOLDER-1) PLACEHOLDER-9 PLACEHOLDER-3 rest PLACEHOLDER-1] (cons (- PLACEHOLDER-9) rest)) (if :else (loop* [PLACEHOLDER-0 num PLACEHOLDER-6 (quote ())] (if (zero? PLACEHOLDER-0) PLACEHOLDER-6 (recur (quot PLACEHOLDER-0 10) (cons (mod PLACEHOLDER-0 10) PLACEHOLDER-6)))) nil))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-0 PLACEHOLDER-4] (loop* [PLACEHOLDER-8 1 PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-4 PLACEHOLDER-4] (if (zero? PLACEHOLDER-4) PLACEHOLDER-8 (if (even? PLACEHOLDER-4) (recur PLACEHOLDER-8 (* PLACEHOLDER-0 PLACEHOLDER-0) (quot PLACEHOLDER-4 2)) (if :else (recur (* PLACEHOLDER-8 PLACEHOLDER-0) PLACEHOLDER-0 (dec PLACEHOLDER-4)) nil))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-5 num) PLACEHOLDER-4 (count PLACEHOLDER-6)] (= num (transduce (map (fn* ([PLACEHOLDER-0] (PLACEHOLDER-7 PLACEHOLDER-0 PLACEHOLDER-4)))) + PLACEHOLDER-6))))))))