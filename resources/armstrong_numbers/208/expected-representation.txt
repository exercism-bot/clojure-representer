((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([num] (if (neg? num) (let* [PLACEHOLDER-8 (PLACEHOLDER-3 (- num)) PLACEHOLDER-1 (#object[clojure.core$seq__5467 0x43edf199 "clojure.core$seq__5467@43edf199"] PLACEHOLDER-8) PLACEHOLDER-7 (#object[clojure.core$first__5449 0x872db30 "clojure.core$first__5449@872db30"] PLACEHOLDER-1) PLACEHOLDER-1 (#object[clojure.core$next__5451 0x149b60e6 "clojure.core$next__5451@149b60e6"] PLACEHOLDER-1) PLACEHOLDER-9 PLACEHOLDER-7 rest PLACEHOLDER-1] (cons (- PLACEHOLDER-9) rest)) (if :else (loop* [PLACEHOLDER-0 num PLACEHOLDER-4 (quote ())] (if (zero? PLACEHOLDER-0) PLACEHOLDER-4 (recur (quot PLACEHOLDER-0 10) (cons (mod PLACEHOLDER-0 10) PLACEHOLDER-4)))) nil))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0 PLACEHOLDER-2] (loop* [PLACEHOLDER-6 1 PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-2 PLACEHOLDER-2] (if (zero? PLACEHOLDER-2) PLACEHOLDER-6 (if (even? PLACEHOLDER-2) (recur PLACEHOLDER-6 (* PLACEHOLDER-0 PLACEHOLDER-0) (quot PLACEHOLDER-2 2)) (if :else (recur (* PLACEHOLDER-6 PLACEHOLDER-0) PLACEHOLDER-0 (dec PLACEHOLDER-2)) nil))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-4 (PLACEHOLDER-3 num) PLACEHOLDER-2 (count PLACEHOLDER-4)] (= num (transduce (map (fn* ([PLACEHOLDER-0] (PLACEHOLDER-5 PLACEHOLDER-0 PLACEHOLDER-2)))) + PLACEHOLDER-4))))))))