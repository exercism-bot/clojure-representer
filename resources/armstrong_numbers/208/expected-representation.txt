((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (if (neg? num) (let* [PLACEHOLDER-0 (PLACEHOLDER-0 (- num)) PLACEHOLDER-0 ((read-string "#object[clojure.core$seq \"clojure.core$seq\"]") PLACEHOLDER-0) PLACEHOLDER-0 ((read-string "#object[clojure.core$first \"clojure.core$first\"]") PLACEHOLDER-0) PLACEHOLDER-0 ((read-string "#object[clojure.core$next \"clojure.core$next\"]") PLACEHOLDER-0) PLACEHOLDER-0 PLACEHOLDER-0 rest PLACEHOLDER-0] (cons (- PLACEHOLDER-0) rest)) (if :else (loop* [PLACEHOLDER-1 num PLACEHOLDER-1 (quote ())] (if (zero? PLACEHOLDER-1) PLACEHOLDER-1 (recur (quot PLACEHOLDER-1 10) (cons (mod PLACEHOLDER-1 10) PLACEHOLDER-1)))) nil))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-1 PLACEHOLDER-3] (loop* [PLACEHOLDER-3 1 PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-3 PLACEHOLDER-3] (if (zero? PLACEHOLDER-3) PLACEHOLDER-3 (if (even? PLACEHOLDER-3) (recur PLACEHOLDER-3 (* PLACEHOLDER-1 PLACEHOLDER-1) (quot PLACEHOLDER-3 2)) (if :else (recur (* PLACEHOLDER-3 PLACEHOLDER-1) PLACEHOLDER-1 (dec PLACEHOLDER-3)) nil))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-1 (PLACEHOLDER-0 num) PLACEHOLDER-3 (count PLACEHOLDER-1)] (= num (transduce (map (fn* ([PLACEHOLDER-1] (PLACEHOLDER-3 PLACEHOLDER-1 PLACEHOLDER-3)))) + PLACEHOLDER-1))))))))