(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-8
  (fn* ([PLACEHOLDER-1] (clojure.lang.RT/count (str PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Util/equiv 0 PLACEHOLDER-3)
     1
     (if
      (clojure.lang.Util/equiv 1 PLACEHOLDER-3)
      PLACEHOLDER-2
      (if :else (apply * (repeat PLACEHOLDER-3 PLACEHOLDER-2))))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-4] (map (comp read-string str) (str PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-5]
    (apply
     +
     (map
      (fn*
       ([PLACEHOLDER-6]
        (PLACEHOLDER-9 PLACEHOLDER-6 (PLACEHOLDER-8 PLACEHOLDER-5))))
      (PLACEHOLDER-10 PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (PLACEHOLDER-11 PLACEHOLDER-7))
     true
     false)))))
