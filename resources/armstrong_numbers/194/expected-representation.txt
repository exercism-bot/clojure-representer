((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (if (< num 10) [num] (conj (PLACEHOLDER-0 (quot num 10)) (mod num 10)))))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-1 PLACEHOLDER-1] (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-2 (PLACEHOLDER-0 num) PLACEHOLDER-1 (count PLACEHOLDER-2) PLACEHOLDER-4 (map (fn* [PLACEHOLDER-4] (PLACEHOLDER-1 PLACEHOLDER-4 PLACEHOLDER-1)) PLACEHOLDER-2) PLACEHOLDER-6 (reduce + PLACEHOLDER-4)] (= num PLACEHOLDER-6)))))))