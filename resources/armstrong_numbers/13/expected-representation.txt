((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (PLACEHOLDER-0 PLACEHOLDER-0 (if (= PLACEHOLDER-0 0) (quote (0)) (quote ())))) ([PLACEHOLDER-0 list] (let* [PLACEHOLDER-2 (bigint PLACEHOLDER-0)] (if (= 0 PLACEHOLDER-2) list (recur (/ PLACEHOLDER-2 10) (cons (mod PLACEHOLDER-2 10) list))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-3 (bigint num)] (let* [PLACEHOLDER-3 (PLACEHOLDER-0 PLACEHOLDER-3) PLACEHOLDER-3 (reduce (fn* [PLACEHOLDER-4 PLACEHOLDER-4] (+' PLACEHOLDER-4 (PLACEHOLDER-5 (bigdec PLACEHOLDER-4) (count PLACEHOLDER-3)))) 0N PLACEHOLDER-3) PLACEHOLDER-3 (bigint PLACEHOLDER-3)] (= PLACEHOLDER-3 PLACEHOLDER-3))))))))