((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-5] (if (zero? PLACEHOLDER-5) 1 (inc (int (PLACEHOLDER-4 (PLACEHOLDER-1 PLACEHOLDER-5)))))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-5 PLACEHOLDER-2 PLACEHOLDER-8] (- PLACEHOLDER-5 (* PLACEHOLDER-2 (PLACEHOLDER-13 (biginteger 10) (dec (biginteger PLACEHOLDER-8)))))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-5 PLACEHOLDER-8] (int (PLACEHOLDER-4 (/ PLACEHOLDER-5 (PLACEHOLDER-11 10 (dec PLACEHOLDER-8)))))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-5] (PLACEHOLDER-9 PLACEHOLDER-5 (PLACEHOLDER-8 PLACEHOLDER-5) [])) ([PLACEHOLDER-5 PLACEHOLDER-8 PLACEHOLDER-10] (if (zero? PLACEHOLDER-8) PLACEHOLDER-10 (let* [PLACEHOLDER-0 (PLACEHOLDER-6 PLACEHOLDER-5 PLACEHOLDER-8)] (recur (PLACEHOLDER-7 PLACEHOLDER-5 PLACEHOLDER-0 PLACEHOLDER-8) (dec PLACEHOLDER-8) (conj PLACEHOLDER-10 (bigint PLACEHOLDER-0)))))))) (def PLACEHOLDER-12 (fn* ([PLACEHOLDER-5] (reduce + (map (fn* [PLACEHOLDER-3] (PLACEHOLDER-13 (biginteger PLACEHOLDER-3) (biginteger (PLACEHOLDER-8 PLACEHOLDER-5)))) (PLACEHOLDER-9 PLACEHOLDER-5)))))) (def armstrong? (fn* ([num] (== (PLACEHOLDER-12 num) num))))))