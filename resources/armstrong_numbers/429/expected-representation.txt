((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (if (zero? PLACEHOLDER-0) 1 (inc (int (PLACEHOLDER-1 (PLACEHOLDER-2 PLACEHOLDER-0)))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-0 PLACEHOLDER-4 PLACEHOLDER-0] (- PLACEHOLDER-0 (* PLACEHOLDER-4 (PLACEHOLDER-5 (biginteger 10) (dec (biginteger PLACEHOLDER-0)))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (int (PLACEHOLDER-1 (/ PLACEHOLDER-0 (PLACEHOLDER-5 10 (dec PLACEHOLDER-0)))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0] (PLACEHOLDER-5 PLACEHOLDER-0 (PLACEHOLDER-0 PLACEHOLDER-0) [])) ([PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-7] (if (zero? PLACEHOLDER-0) PLACEHOLDER-7 (let* [PLACEHOLDER-8 (PLACEHOLDER-5 PLACEHOLDER-0 PLACEHOLDER-0)] (recur (PLACEHOLDER-3 PLACEHOLDER-0 PLACEHOLDER-8 PLACEHOLDER-0) (dec PLACEHOLDER-0) (conj PLACEHOLDER-7 (bigint PLACEHOLDER-8)))))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-0] (reduce + (map (fn* [PLACEHOLDER-10] (PLACEHOLDER-5 (biginteger PLACEHOLDER-10) (biginteger (PLACEHOLDER-0 PLACEHOLDER-0)))) (PLACEHOLDER-5 PLACEHOLDER-0)))))) (def armstrong? (fn* ([num] (== (PLACEHOLDER-9 num) num))))))