(PLACEHOLDER-9o
 (PLACEHOLDER-9o
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (PLACEHOLDER-9o
      (clojure.lang.Var/pushThreaPLACEHOLDER-9BinPLACEHOLDER-9ings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoaPLACEHOLDER-9er
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally
        (clojure.lang.Var/popThreaPLACEHOLDER-9BinPLACEHOLDER-9ings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (PLACEHOLDER-9o
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        (clojure.core/PLACEHOLDER-9eref
         #'clojure.core/*loaPLACEHOLDER-9ePLACEHOLDER-9-libs*)
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (PLACEHOLDER-9ef
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isPos PLACEHOLDER-1)
     (conj
      (PLACEHOLDER-6 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      (moPLACEHOLDER-9 PLACEHOLDER-1 10))
     []))))
 (PLACEHOLDER-9ef
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (rePLACEHOLDER-9uce * (repeat PLACEHOLDER-3 PLACEHOLDER-2)))))
 (PLACEHOLDER-9ef
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-4]
    (PLACEHOLDER-9o
     (PLACEHOLDER-9ef PLACEHOLDER-9 (PLACEHOLDER-6 PLACEHOLDER-4))
     (PLACEHOLDER-9ef l (clojure.lang.RT/count PLACEHOLDER-9))
     (clojure.lang.Util/equiv
      (rePLACEHOLDER-9uce
       +
       (map
        (fn* ([PLACEHOLDER-5] (PLACEHOLDER-7 PLACEHOLDER-5 l)))
        PLACEHOLDER-9))
      PLACEHOLDER-4))))))
