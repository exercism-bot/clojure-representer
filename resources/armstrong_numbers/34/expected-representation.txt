((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-3] (loop* [PLACEHOLDER-5 PLACEHOLDER-3 PLACEHOLDER-11 []] (if (= PLACEHOLDER-5 0) PLACEHOLDER-11 (recur (quot PLACEHOLDER-5 10) (conj PLACEHOLDER-11 (rem PLACEHOLDER-5 10)))))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-0 PLACEHOLDER-5] (if (< PLACEHOLDER-5 0) (/ 1 (PLACEHOLDER-7 PLACEHOLDER-0 (- PLACEHOLDER-5))) (loop* [PLACEHOLDER-4 1 PLACEHOLDER-2 PLACEHOLDER-0 PLACEHOLDER-6 PLACEHOLDER-5] (if (= PLACEHOLDER-6 0) PLACEHOLDER-4 (if (even? PLACEHOLDER-6) (recur PLACEHOLDER-4 (* PLACEHOLDER-2 PLACEHOLDER-2) (/ PLACEHOLDER-6 2)) (recur (* PLACEHOLDER-4 PLACEHOLDER-2) PLACEHOLDER-2 (dec PLACEHOLDER-6))))))))) (def PLACEHOLDER-1 (fn* ([num] (loop* [PLACEHOLDER-10 (PLACEHOLDER-8 num) PLACEHOLDER-9 0] (if (empty? PLACEHOLDER-10) PLACEHOLDER-9 (recur (rest PLACEHOLDER-10) (+ (PLACEHOLDER-7 (first PLACEHOLDER-10) (count (PLACEHOLDER-8 num))) PLACEHOLDER-9))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-1 num)))))))