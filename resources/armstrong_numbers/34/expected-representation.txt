((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (loop* [PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-1 []] (if (= PLACEHOLDER-0 0) PLACEHOLDER-1 (recur (quot PLACEHOLDER-0 10) (conj PLACEHOLDER-1 (rem PLACEHOLDER-0 10)))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-3 PLACEHOLDER-0] (if (< PLACEHOLDER-0 0) (/ 1 (PLACEHOLDER-3 PLACEHOLDER-3 (- PLACEHOLDER-0))) (loop* [PLACEHOLDER-5 1 PLACEHOLDER-5 PLACEHOLDER-3 PLACEHOLDER-5 PLACEHOLDER-0] (if (= PLACEHOLDER-5 0) PLACEHOLDER-5 (if (even? PLACEHOLDER-5) (recur PLACEHOLDER-5 (* PLACEHOLDER-5 PLACEHOLDER-5) (/ PLACEHOLDER-5 2)) (recur (* PLACEHOLDER-5 PLACEHOLDER-5) PLACEHOLDER-5 (dec PLACEHOLDER-5))))))))) (def PLACEHOLDER-8 (fn* ([num] (loop* [PLACEHOLDER-8 (PLACEHOLDER-0 num) PLACEHOLDER-9 0] (if (empty? PLACEHOLDER-8) PLACEHOLDER-9 (recur (rest PLACEHOLDER-8) (+ (PLACEHOLDER-3 (first PLACEHOLDER-8) (count (PLACEHOLDER-0 num))) PLACEHOLDER-9))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-8 num)))))))