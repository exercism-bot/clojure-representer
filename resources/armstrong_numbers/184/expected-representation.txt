((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-0 PLACEHOLDER-2] (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-0))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-7 (atom 0)) (loop* [PLACEHOLDER-5 (clojure.core/seq (seq (str num))) PLACEHOLDER-6 nil PLACEHOLDER-1 0 PLACEHOLDER-8 0] (if (clojure.core/< PLACEHOLDER-8 PLACEHOLDER-1) (let* [PLACEHOLDER-2 (clojure.core/nth PLACEHOLDER-6 PLACEHOLDER-8)] (do (reset! PLACEHOLDER-7 (+ (deref PLACEHOLDER-7) (PLACEHOLDER-3 (Character/digit PLACEHOLDER-2 10) (count (str num)))))) (recur PLACEHOLDER-5 PLACEHOLDER-6 PLACEHOLDER-1 (clojure.core/unchecked-inc PLACEHOLDER-8))) (let* [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-5)] (if PLACEHOLDER-5 (do (if (clojure.core/chunked-seq? PLACEHOLDER-5) (let* [PLACEHOLDER-4 (clojure.core/chunk-first PLACEHOLDER-5)] (recur (clojure.core/chunk-rest PLACEHOLDER-5) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-4)) (clojure.core/int 0))) (let* [PLACEHOLDER-2 (clojure.core/first PLACEHOLDER-5)] (do (reset! PLACEHOLDER-7 (+ (deref PLACEHOLDER-7) (PLACEHOLDER-3 (Character/digit PLACEHOLDER-2 10) (count (str num)))))) (recur (clojure.core/next PLACEHOLDER-5) nil 0 0)))))))) (= num (deref PLACEHOLDER-7)))))))