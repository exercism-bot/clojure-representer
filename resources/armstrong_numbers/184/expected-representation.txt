((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-0))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-8 (atom 0)) (loop* [PLACEHOLDER-1 (clojure.core/seq (seq (str num))) PLACEHOLDER-2 nil PLACEHOLDER-7 0 PLACEHOLDER-3 0] (if (clojure.core/< PLACEHOLDER-3 PLACEHOLDER-7) (let* [PLACEHOLDER-4 (clojure.core/nth-2 PLACEHOLDER-3)] (do (reset! PLACEHOLDER-8 (+ (deref PLACEHOLDER-8) (PLACEHOLDER-5 (Character/digit PLACEHOLDER-4 10) (count (str num)))))) (recur PLACEHOLDER-1 PLACEHOLDER-2 PLACEHOLDER-7 (clojure.core/unchecked-inc PLACEHOLDER-3))) (let* [PLACEHOLDER-1 (clojure.core/seq PLACEHOLDER-1)] (if PLACEHOLDER-1 (do (if (clojure.core/chunked-seq? PLACEHOLDER-1) (let* [PLACEHOLDER-6 (clojure.core/chunk-first PLACEHOLDER-1)] (recur (clojure.core/chunk-rest PLACEHOLDER-1) PLACEHOLDER-6 (clojure.core/int (clojure.core/count PLACEHOLDER-6)) (clojure.core/int 0))) (let* [PLACEHOLDER-4 (clojure.core/first PLACEHOLDER-1)] (do (reset! PLACEHOLDER-8 (+ (deref PLACEHOLDER-8) (PLACEHOLDER-5 (Character/digit PLACEHOLDER-4 10) (count (str num)))))) (recur (clojure.core/next PLACEHOLDER-1) nil 0 0)))))))) (= num (deref PLACEHOLDER-8)))))))