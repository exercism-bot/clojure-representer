((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as str])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-0 PLACEHOLDER-5] (loop* [PLACEHOLDER-4 1 PLACEHOLDER-5 PLACEHOLDER-5] (if (zero? PLACEHOLDER-5) PLACEHOLDER-4 (recur (* PLACEHOLDER-0 PLACEHOLDER-4) (dec PLACEHOLDER-5))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-1 (map read-string (PLACEHOLDER-2 (str num) (re-pattern "")))) (def PLACEHOLDER-7 (count PLACEHOLDER-1)) (if (let* [PLACEHOLDER-8 (>= num 10)] (if PLACEHOLDER-8 (<= num 100) PLACEHOLDER-8)) false (if (< num 10) true (if (= num (apply + (map (fn* [PLACEHOLDER-3] (PLACEHOLDER-6 PLACEHOLDER-3 PLACEHOLDER-7)) PLACEHOLDER-1))) true (if :else false nil)))))))))