(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-16
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-17
  (fn* ([PLACEHOLDER-3] ((comp long /) PLACEHOLDER-3 10))))
 (def
  PLACEHOLDER-18
  (fn*
   ([PLACEHOLDER-4]
    ((comp inc long) (java.lang.Math/log10 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-19
  (fn*
   ([PLACEHOLDER-5] (PLACEHOLDER-19 PLACEHOLDER-5 ()))
   ([PLACEHOLDER-6 PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (PLACEHOLDER-17 PLACEHOLDER-6)
      PLACEHOLDER-9
      (conj PLACEHOLDER-7 (mod PLACEHOLDER-6 10))]
     (if
      (clojure.lang.Numbers/lte PLACEHOLDER-6 9)
      PLACEHOLDER-9
      (recur PLACEHOLDER-8 PLACEHOLDER-9))))))
 (def
  PLACEHOLDER-20
  (fn*
   ([PLACEHOLDER-10]
    (let*
     [PLACEHOLDER-11 (clojure.lang.Numbers/lte PLACEHOLDER-10 9)]
     (if
      PLACEHOLDER-11
      PLACEHOLDER-11
      (let*
       [PLACEHOLDER-12
        (PLACEHOLDER-18 PLACEHOLDER-10)
        PLACEHOLDER-13
        (partial reduce +)
        PLACEHOLDER-15
        (partial
         map
         (fn*
          ([PLACEHOLDER-14]
           (PLACEHOLDER-16 PLACEHOLDER-14 PLACEHOLDER-12))))]
       (clojure.lang.Util/equiv
        PLACEHOLDER-10
        ((comp PLACEHOLDER-13 PLACEHOLDER-15 PLACEHOLDER-19)
         PLACEHOLDER-10)))))))))
