((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([num] (loop* [num num PLACEHOLDER-9 []] (let* [PLACEHOLDER-4 (int (/ num 10)) last (int (mod num 10))] (if (= PLACEHOLDER-4 0) (conj PLACEHOLDER-9 last) (recur PLACEHOLDER-4 (conj PLACEHOLDER-9 last)))))))) (def PLACEHOLDER-7 (fn* ([num PLACEHOLDER-7] (loop* [PLACEHOLDER-5 1 PLACEHOLDER-7 PLACEHOLDER-7] (if (zero? PLACEHOLDER-7) PLACEHOLDER-5 (recur (* PLACEHOLDER-5 num) (dec PLACEHOLDER-7))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-8 (PLACEHOLDER-8 num) PLACEHOLDER-2 (count PLACEHOLDER-8) PLACEHOLDER-0 (reduce + (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-7 PLACEHOLDER-6 PLACEHOLDER-2)) PLACEHOLDER-8))] (= num PLACEHOLDER-0))))) (def PLACEHOLDER-3 (fn* ([& PLACEHOLDER-1] (println (armstrong? 153)))))))