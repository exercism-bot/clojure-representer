((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (loop* [num num PLACEHOLDER-0 []] (let* [PLACEHOLDER-1 (int (/ num 10)) last (int (mod num 10))] (if (= PLACEHOLDER-1 0) (conj PLACEHOLDER-0 last) (recur PLACEHOLDER-1 (conj PLACEHOLDER-0 last)))))))) (def PLACEHOLDER-4 (fn* ([num PLACEHOLDER-4] (loop* [PLACEHOLDER-5 1 PLACEHOLDER-4 PLACEHOLDER-4] (if (zero? PLACEHOLDER-4) PLACEHOLDER-5 (recur (* PLACEHOLDER-5 num) (dec PLACEHOLDER-4))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-0 (PLACEHOLDER-0 num) PLACEHOLDER-6 (count PLACEHOLDER-0) PLACEHOLDER-7 (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-4 PLACEHOLDER-7 PLACEHOLDER-6)) PLACEHOLDER-0))] (= num PLACEHOLDER-7))))) (def PLACEHOLDER-9 (fn* ([& PLACEHOLDER-9] (println (armstrong? 153)))))))