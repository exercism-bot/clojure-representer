((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (loop* [num num PLACEHOLDER-7 []] (if (< num 10) (conj PLACEHOLDER-7 num) (recur (quot num 10) (conj PLACEHOLDER-7 (mod num 10)))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-1 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-1))))) (def PLACEHOLDER-2 (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-0 num)] (reduce (fn* ([PLACEHOLDER-7 PLACEHOLDER-3] (+ PLACEHOLDER-7 (PLACEHOLDER-5 PLACEHOLDER-3 (count PLACEHOLDER-6))))) (bigdec 0) PLACEHOLDER-6))))) (def armstrong? (fn* ([num] (= (bigdec num) (PLACEHOLDER-2 num)))))))