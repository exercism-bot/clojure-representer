(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-10
  (fn* ([PLACEHOLDER-3] (clojure.lang.RT/count (str PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-4 0)
     []
     (conj
      (PLACEHOLDER-11
       (clojure.lang.RT/longCast
        (clojure.lang.Numbers/divide PLACEHOLDER-4 10))
       PLACEHOLDER-5)
      (PLACEHOLDER-9 (mod PLACEHOLDER-4 10) PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-6 PLACEHOLDER-7]
    (reduce + (PLACEHOLDER-11 PLACEHOLDER-6 PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     PLACEHOLDER-8
     (PLACEHOLDER-12 PLACEHOLDER-8 (PLACEHOLDER-10 PLACEHOLDER-8)))))))
