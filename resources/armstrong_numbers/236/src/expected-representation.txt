(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-10-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-10-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-10-numbers))))
    nil)))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-1)
     [PLACEHOLDER-1]
     (loop*
      [PLACEHOLDER-2 PLACEHOLDER-1 PLACEHOLDER-3 '()]
      (if
       (clojure.lang.Numbers/isZero PLACEHOLDER-2)
       PLACEHOLDER-3
       (recur
        (clojure.lang.Numbers/quotient PLACEHOLDER-2 10)
        (cons (mod PLACEHOLDER-2 10) PLACEHOLDER-3))))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5
      (PLACEHOLDER-9 PLACEHOLDER-4)
      PLACEHOLDER-6
      (clojure.lang.RT/count PLACEHOLDER-5)]
     (reduce
      +
      (map
       (fn*
        ([PLACEHOLDER-7]
         (java.lang.Math/pow PLACEHOLDER-7 PLACEHOLDER-6)))
       PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-10?
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     (PLACEHOLDER-10 PLACEHOLDER-8)
     (clojure.lang.RT/doubleCast PLACEHOLDER-8))))))
