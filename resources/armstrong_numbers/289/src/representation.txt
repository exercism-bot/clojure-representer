(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-21
  (fn* ([PLACEHOLDER-1] (java.lang.Integer/parseInt PLACEHOLDER-1))))
 (def
  PLACEHOLDER-22
  (fn* ([PLACEHOLDER-2] (java.math.BigInteger/valueOf PLACEHOLDER-2))))
 (def
  PLACEHOLDER-23
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (.pow (PLACEHOLDER-22 PLACEHOLDER-3) PLACEHOLDER-4))))
 (def
  PLACEHOLDER-24
  (fn*
   ([PLACEHOLDER-5]
    (map PLACEHOLDER-21 (map str (seq (str PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-25
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7 (PLACEHOLDER-24 PLACEHOLDER-6)]
     (reduce
      +
      (let*
       [PLACEHOLDER-19
        (fn*
         PLACEHOLDER-8
         ([PLACEHOLDER-9]
          (new
           clojure.lang.LazySeq
           (fn*
            ([]
             (loop*
              [PLACEHOLDER-10 PLACEHOLDER-9]
              (let*
               [PLACEHOLDER-11 (clojure.core/seq PLACEHOLDER-10)]
               (if
                PLACEHOLDER-11
                (let*
                 [PLACEHOLDER-12 PLACEHOLDER-11]
                 (if
                  (clojure.core/chunked-seq? PLACEHOLDER-12)
                  (let*
                   [PLACEHOLDER-13
                    (clojure.core/chunk-first PLACEHOLDER-12)
                    PLACEHOLDER-14
                    (clojure.lang.RT/intCast
                     (clojure.lang.RT/count PLACEHOLDER-13))
                    PLACEHOLDER-15
                    (clojure.core/chunk-buffer PLACEHOLDER-14)]
                   (if
                    (loop*
                     [PLACEHOLDER-16 (clojure.lang.RT/intCast 0)]
                     (if
                      (clojure.lang.Numbers/lt
                       PLACEHOLDER-16
                       PLACEHOLDER-14)
                      (let*
                       [PLACEHOLDER-17
                        (.nth PLACEHOLDER-13 PLACEHOLDER-16)]
                       (do
                        (clojure.core/chunk-append
                         PLACEHOLDER-15
                         (PLACEHOLDER-23
                          PLACEHOLDER-17
                          (clojure.lang.RT/count PLACEHOLDER-7)))
                        (recur
                         (clojure.lang.Numbers/unchecked_inc
                          PLACEHOLDER-16))))
                      true))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-15)
                     (PLACEHOLDER-8
                      (clojure.core/chunk-rest PLACEHOLDER-12)))
                    (clojure.core/chunk-cons
                     (clojure.core/chunk PLACEHOLDER-15)
                     nil)))
                  (let*
                   [PLACEHOLDER-18 (clojure.core/first PLACEHOLDER-12)]
                   (clojure.core/cons
                    (PLACEHOLDER-23
                     PLACEHOLDER-18
                     (clojure.lang.RT/count PLACEHOLDER-7))
                    (PLACEHOLDER-8
                     (clojure.core/rest PLACEHOLDER-12))))))))))))))]
       (PLACEHOLDER-19 PLACEHOLDER-7)))))))
 (def
  PLACEHOLDER-26
  (fn*
   ([PLACEHOLDER-20]
    (clojure.lang.Util/equiv
     PLACEHOLDER-20
     (PLACEHOLDER-25 PLACEHOLDER-20))))))
