(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-13-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'PLACEHOLDER-13-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'PLACEHOLDER-13-numbers))))
    nil)))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-3]
    (seq
     (map
      (fn* ([PLACEHOLDER-4] (mod PLACEHOLDER-4 10)))
      (take-while
       pos?
       (iterate
        (fn*
         ([PLACEHOLDER-5]
          (clojure.lang.Numbers/quotient PLACEHOLDER-5 10)))
        PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-6]
    (let*
     [PLACEHOLDER-7 (clojure.lang.RT/count PLACEHOLDER-6)]
     (reduce
      (fn*
       ([PLACEHOLDER-8 PLACEHOLDER-9]
        (clojure.lang.Numbers/add
         PLACEHOLDER-8
         (PLACEHOLDER-11 PLACEHOLDER-9 PLACEHOLDER-7))))
      0
      PLACEHOLDER-6)))))
 (def
  PLACEHOLDER-13?
  (fn*
   ([PLACEHOLDER-10]
    (clojure.lang.Util/equiv
     (PLACEHOLDER-13 (PLACEHOLDER-12 PLACEHOLDER-10))
     PLACEHOLDER-10)))))
