(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-1] (PLACEHOLDER-9 PLACEHOLDER-1 ()))
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-2 10)
     (conj PLACEHOLDER-3 PLACEHOLDER-2)
     (PLACEHOLDER-9
      (bigint (clojure.lang.Numbers/divide PLACEHOLDER-2 10))
      (conj PLACEHOLDER-3 (mod PLACEHOLDER-2 10)))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-6]
    (do
     (def PLACEHOLDER-12 (PLACEHOLDER-9 PLACEHOLDER-6))
     (def PLACEHOLDER-13 (clojure.lang.RT/count PLACEHOLDER-12))
     (clojure.lang.Util/equiv
      PLACEHOLDER-6
      (reduce
       (fn*
        ([PLACEHOLDER-7 PLACEHOLDER-8]
         (clojure.lang.Numbers/add
          PLACEHOLDER-7
          (PLACEHOLDER-10 PLACEHOLDER-8 PLACEHOLDER-13))))
       0
       PLACEHOLDER-12)))))))
