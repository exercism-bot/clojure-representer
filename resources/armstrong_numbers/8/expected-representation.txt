((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as s])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0] (s/split (str PLACEHOLDER-0) (re-pattern ""))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-0] (loop* [PLACEHOLDER-3 (PLACEHOLDER-5 PLACEHOLDER-0) PLACEHOLDER-1 []] (if (empty? PLACEHOLDER-3) PLACEHOLDER-1 (let* [vec PLACEHOLDER-3 seq ((read-string "#object[clojure.core$seq 0x43edf199 \"clojure.core$seq@43edf199\"]") vec) first ((read-string "#object[clojure.core$first 0x872db30 \"clojure.core$first@872db30\"]") seq) seq ((read-string "#object[clojure.core$next 0x149b60e6 \"clojure.core$next@149b60e6\"]") seq) PLACEHOLDER-4 first PLACEHOLDER-2 seq] (recur PLACEHOLDER-2 (conj PLACEHOLDER-1 (Integer. PLACEHOLDER-4))))))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-0] (loop* [PLACEHOLDER-1 (PLACEHOLDER-5 PLACEHOLDER-0)]))))))