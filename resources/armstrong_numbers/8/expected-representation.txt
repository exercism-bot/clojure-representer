(((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as s])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-0] (s/split (str PLACEHOLDER-0) (re-pattern ""))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-0] (loop* [string-vector (PLACEHOLDER-6 PLACEHOLDER-0) number-vector []] (if (empty? string-vector) number-vector (let* [PLACEHOLDER-3 string-vector PLACEHOLDER-4 ((read-string "#object[clojure.core$seq__5467 0x43edf199 \"clojure.core$seq__5467@43edf199\"]") PLACEHOLDER-3) PLACEHOLDER-1 ((read-string "#object[clojure.core$first__5449 0x872db30 \"clojure.core$first__5449@872db30\"]") PLACEHOLDER-4) PLACEHOLDER-4 ((read-string "#object[clojure.core$next__5451 0x149b60e6 \"clojure.core$next__5451@149b60e6\"]") PLACEHOLDER-4) PLACEHOLDER-5 PLACEHOLDER-1 PLACEHOLDER-2 PLACEHOLDER-4] (recur PLACEHOLDER-2 (conj number-vector (Integer. PLACEHOLDER-5))))))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-0] (loop* [number-vector (PLACEHOLDER-6 PLACEHOLDER-0)])))))))