((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-0 PLACEHOLDER-5] (if (= PLACEHOLDER-5 0) 1 (if (= PLACEHOLDER-5 1) PLACEHOLDER-0 (if :else (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-0)) nil)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (loop* [PLACEHOLDER-3 num PLACEHOLDER-7 (quote ())] (if (< PLACEHOLDER-3 10) (cons PLACEHOLDER-3 PLACEHOLDER-7) (recur (quot PLACEHOLDER-3 10) (cons (mod PLACEHOLDER-3 10) PLACEHOLDER-7)))) PLACEHOLDER-2 (count PLACEHOLDER-6)] (= num (reduce + (map (fn* [PLACEHOLDER-1] (PLACEHOLDER-4 PLACEHOLDER-1 PLACEHOLDER-2)) PLACEHOLDER-6)))))))))