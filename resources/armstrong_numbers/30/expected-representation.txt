((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (if (= PLACEHOLDER-0 0) 1 (if (= PLACEHOLDER-0 1) PLACEHOLDER-0 (if :else (reduce * (repeat PLACEHOLDER-0 PLACEHOLDER-0)) nil)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-3 (loop* [PLACEHOLDER-3 num PLACEHOLDER-3 (quote ())] (if (< PLACEHOLDER-3 10) (cons PLACEHOLDER-3 PLACEHOLDER-3) (recur (quot PLACEHOLDER-3 10) (cons (mod PLACEHOLDER-3 10) PLACEHOLDER-3)))) PLACEHOLDER-5 (count PLACEHOLDER-3)] (= num (reduce + (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-0 PLACEHOLDER-6 PLACEHOLDER-5)) PLACEHOLDER-3)))))))))