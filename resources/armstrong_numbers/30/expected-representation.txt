((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-0 PLACEHOLDER-4] (if (= PLACEHOLDER-4 0) 1 (if (= PLACEHOLDER-4 1) PLACEHOLDER-0 (if :else (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-0)) nil)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (loop* [PLACEHOLDER-2 num PLACEHOLDER-6 (quote ())] (if (< PLACEHOLDER-2 10) (cons PLACEHOLDER-2 PLACEHOLDER-6) (recur (quot PLACEHOLDER-2 10) (cons (mod PLACEHOLDER-2 10) PLACEHOLDER-6)))) PLACEHOLDER-1 (count PLACEHOLDER-5)] (= num (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-3 PLACEHOLDER-7 PLACEHOLDER-1)) PLACEHOLDER-5)))))))))