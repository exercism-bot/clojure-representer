(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (if
     (clojure.lang.Numbers/equiv PLACEHOLDER-2 0)
     PLACEHOLDER-1
     (PLACEHOLDER-9
      (conj PLACEHOLDER-1 (mod PLACEHOLDER-2 10))
      (bigint (clojure.lang.Numbers/divide PLACEHOLDER-2 10)))))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-5 PLACEHOLDER-6 PLACEHOLDER-7]
    (if
     (clojure.lang.Util/equiv (clojure.lang.RT/count PLACEHOLDER-5) 0)
     PLACEHOLDER-6
     (PLACEHOLDER-11
      (PLACEHOLDER-15t PLACEHOLDER-5)
      (clojure.lang.Numbers/add
       PLACEHOLDER-6
       (PLACEHOLDER-10 (first PLACEHOLDER-5) PLACEHOLDER-7))
      PLACEHOLDER-7)))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-8]
    (do
     (def PLACEHOLDER-13 (bigint PLACEHOLDER-8))
     (def PLACEHOLDER-14 (PLACEHOLDER-9 '() PLACEHOLDER-13))
     (def PLACEHOLDER-14Count (clojure.lang.RT/count PLACEHOLDER-14))
     (def
      PLACEHOLDER-15
      (PLACEHOLDER-11 PLACEHOLDER-14 0 PLACEHOLDER-14Count))
     (clojure.lang.Numbers/equiv PLACEHOLDER-15 PLACEHOLDER-13))))))
