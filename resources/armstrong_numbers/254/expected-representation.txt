((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as str])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (map (comp read-string str) (str PLACEHOLDER-0))))) (def PLACEHOLDER-0 (PLACEHOLDER-0 num)) (def PLACEHOLDER-1 (count PLACEHOLDER-0)) (def PLACEHOLDER-2 (let* [PLACEHOLDER-3 (fn* PLACEHOLDER-3 ([PLACEHOLDER-3] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-3 PLACEHOLDER-3] (let* [PLACEHOLDER-3 (clojure.core/seq PLACEHOLDER-3)] (if PLACEHOLDER-3 (do (if (clojure.core/chunked-seq? PLACEHOLDER-3) (let* [PLACEHOLDER-3 (clojure.core/chunk-first PLACEHOLDER-3) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-3)) PLACEHOLDER-4 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-5 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-5 PLACEHOLDER-4) (let* [PLACEHOLDER-6 (clojure.core/nth-12 PLACEHOLDER-5)] (do (clojure.core/chunk-append PLACEHOLDER-4 (apply * (repeat PLACEHOLDER-1 PLACEHOLDER-6))) (recur (clojure.core/unchecked-inc PLACEHOLDER-5)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-4) (PLACEHOLDER-3 (clojure.core/chunk-rest PLACEHOLDER-3))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-4) nil))) (let* [PLACEHOLDER-6 (clojure.core/first PLACEHOLDER-3)] (clojure.core/cons (apply * (repeat PLACEHOLDER-1 PLACEHOLDER-6)) (PLACEHOLDER-3 (clojure.core/rest PLACEHOLDER-3)))))))))))))] (PLACEHOLDER-3 PLACEHOLDER-0))) (zero? (- num (apply + PLACEHOLDER-2))))))))