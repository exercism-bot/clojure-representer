((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as str])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-6] (map (comp read-string str) (str PLACEHOLDER-6))))) (def PLACEHOLDER-7 (PLACEHOLDER-5 num)) (def PLACEHOLDER-3 (count PLACEHOLDER-7)) (def PLACEHOLDER-2 (let* [PLACEHOLDER-1 (fn* PLACEHOLDER-9 ([PLACEHOLDER-12] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-12 PLACEHOLDER-12] (let* [PLACEHOLDER-12 (clojure.core/seq PLACEHOLDER-12)] (if PLACEHOLDER-12 (do (if (clojure.core/chunked-seq? PLACEHOLDER-12) (let* [PLACEHOLDER-11 (clojure.core/chunk-first PLACEHOLDER-12) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-11)) PLACEHOLDER-10 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-8 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-8 PLACEHOLDER-4) (let* [PLACEHOLDER-0 (clojure.core/nth PLACEHOLDER-11 PLACEHOLDER-8)] (do (clojure.core/chunk-append PLACEHOLDER-10 (apply * (repeat PLACEHOLDER-3 PLACEHOLDER-0))) (recur (clojure.core/unchecked-inc PLACEHOLDER-8)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-10) (PLACEHOLDER-9 (clojure.core/chunk-rest PLACEHOLDER-12))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-10) nil))) (let* [PLACEHOLDER-0 (clojure.core/first PLACEHOLDER-12)] (clojure.core/cons (apply * (repeat PLACEHOLDER-3 PLACEHOLDER-0)) (PLACEHOLDER-9 (clojure.core/rest PLACEHOLDER-12)))))))))))))] (PLACEHOLDER-1 PLACEHOLDER-7))) (zero? (- num (apply + PLACEHOLDER-2))))))))