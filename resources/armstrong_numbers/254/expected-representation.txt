((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/require (quote [clojure.string :as str])) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-9] (map (comp read-string str) (str PLACEHOLDER-9))))) (def PLACEHOLDER-10 (PLACEHOLDER-8 num)) (def PLACEHOLDER-4 (count PLACEHOLDER-10)) (def PLACEHOLDER-2 (let* [PLACEHOLDER-1 (fn* PLACEHOLDER-6 ([PLACEHOLDER-3] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-3 PLACEHOLDER-3] (let* [PLACEHOLDER-3 (clojure.core/seq PLACEHOLDER-3)] (if PLACEHOLDER-3 (do (if (clojure.core/chunked-seq? PLACEHOLDER-3) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-3) PLACEHOLDER-7 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-5 (clojure.core/chunk-buffer PLACEHOLDER-7)] (if (loop* [PLACEHOLDER-11 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-11 PLACEHOLDER-7) (let* [PLACEHOLDER-0 (clojure.core/nth-12 PLACEHOLDER-11)] (do (clojure.core/chunk-append PLACEHOLDER-5 (apply * (repeat PLACEHOLDER-4 PLACEHOLDER-0))) (recur (clojure.core/unchecked-inc PLACEHOLDER-11)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) (PLACEHOLDER-6 (clojure.core/chunk-rest PLACEHOLDER-3))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) nil))) (let* [PLACEHOLDER-0 (clojure.core/first PLACEHOLDER-3)] (clojure.core/cons (apply * (repeat PLACEHOLDER-4 PLACEHOLDER-0)) (PLACEHOLDER-6 (clojure.core/rest PLACEHOLDER-3)))))))))))))] (PLACEHOLDER-1 PLACEHOLDER-10))) (zero? (- num (apply + PLACEHOLDER-2))))))))