((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (require (quote ([clojure.string :as str]))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-6] "converts number to digits e.g 19 becomes [1 9]" (map (fn* [PLACEHOLDER-0] (read-string (str PLACEHOLDER-0))) (str PLACEHOLDER-6))))) (def PLACEHOLDER-12 (fn* ([PLACEHOLDER-2 PLACEHOLDER-13] (def PLACEHOLDER-4 (PLACEHOLDER-9 PLACEHOLDER-2 PLACEHOLDER-13)) (identity (PLACEHOLDER-5 PLACEHOLDER-4))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-7 (reduce conj [] (PLACEHOLDER-8 num))) (def PLACEHOLDER-13 (count PLACEHOLDER-7)) (def PLACEHOLDER-1 (fn* [PLACEHOLDER-10] (PLACEHOLDER-5 (PLACEHOLDER-9 PLACEHOLDER-10 PLACEHOLDER-13)))) (println (str "num: " num)) (println (str "digit  array: " PLACEHOLDER-7)) (println (str "count: " PLACEHOLDER-13)) (def PLACEHOLDER-3 (reduce conj [] (map PLACEHOLDER-1 PLACEHOLDER-7))) (println (str "transform: " PLACEHOLDER-3)) (def PLACEHOLDER-11 (apply + PLACEHOLDER-3)) (println (str "result: " PLACEHOLDER-11)) (if (= num PLACEHOLDER-11) true false))))))