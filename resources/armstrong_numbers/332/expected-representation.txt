((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (require (quote ([clojure.string :as str]))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] "converts number to digits e.g 19 becomes [1 9]" (map (fn* [PLACEHOLDER-1] (read-string (str PLACEHOLDER-1))) (str PLACEHOLDER-0))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-2 PLACEHOLDER-3] (def PLACEHOLDER-3 (PLACEHOLDER-4 PLACEHOLDER-2 PLACEHOLDER-3)) (identity (PLACEHOLDER-5 PLACEHOLDER-3))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-6 (reduce conj [] (PLACEHOLDER-0 num))) (def PLACEHOLDER-3 (count PLACEHOLDER-6)) (def PLACEHOLDER-7 (fn* [PLACEHOLDER-8] (PLACEHOLDER-5 (PLACEHOLDER-4 PLACEHOLDER-8 PLACEHOLDER-3)))) (println (str "num: " num)) (println (str "digit  array: " PLACEHOLDER-6)) (println (str "count: " PLACEHOLDER-3)) (def PLACEHOLDER-11 (reduce conj [] (map PLACEHOLDER-7 PLACEHOLDER-6))) (println (str "transform: " PLACEHOLDER-11)) (def PLACEHOLDER-13 (apply + PLACEHOLDER-11)) (println (str "result: " PLACEHOLDER-13)) (if (= num PLACEHOLDER-13) true false))))))