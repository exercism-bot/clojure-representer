((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-0))))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-2] (loop* [PLACEHOLDER-2 PLACEHOLDER-2 PLACEHOLDER-3 []] (if (zero? PLACEHOLDER-2) PLACEHOLDER-3 (recur (quot PLACEHOLDER-2 10) (conj PLACEHOLDER-3 (mod PLACEHOLDER-2 10)))))))) (def armstrong? (fn* ([num] (= num (let* [PLACEHOLDER-6 (PLACEHOLDER-1 num)] (apply + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-0 PLACEHOLDER-7 (count PLACEHOLDER-6))) PLACEHOLDER-6)))))))))