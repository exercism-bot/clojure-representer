(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/lt PLACEHOLDER-1 10)
     1
     (clojure.lang.Numbers/add
      (PLACEHOLDER-7 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      1)))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Util/equiv PLACEHOLDER-3 0)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-2
      (PLACEHOLDER-8
       PLACEHOLDER-2
       (clojure.lang.Numbers/minus PLACEHOLDER-3 1)))))))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (do
     (def
      PLACEHOLDER-10
      (PLACEHOLDER-8 (mod PLACEHOLDER-4 10) PLACEHOLDER-5))
     (if
      (clojure.lang.Numbers/lt PLACEHOLDER-4 10)
      PLACEHOLDER-10
      (clojure.lang.Numbers/add
       PLACEHOLDER-10
       (PLACEHOLDER-9
        (clojure.lang.Numbers/quotient PLACEHOLDER-4 10)
        PLACEHOLDER-5)))))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-6]
    (do
     (def PLACEHOLDER-12 (PLACEHOLDER-7 PLACEHOLDER-6))
     (clojure.lang.Util/equiv
      (PLACEHOLDER-9 PLACEHOLDER-6 PLACEHOLDER-12)
      PLACEHOLDER-6))))))
