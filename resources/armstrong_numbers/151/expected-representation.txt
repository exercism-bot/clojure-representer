((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (reduce * (repeat PLACEHOLDER-1 PLACEHOLDER-0))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-3] (let* [PLACEHOLDER-4 PLACEHOLDER-3 PLACEHOLDER-6 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-4 0 nil) PLACEHOLDER-6 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-4 1 nil)] [(quot PLACEHOLDER-6 10) (mod PLACEHOLDER-6 10)])))) (def PLACEHOLDER-7 (fn* ([num] (int (inc (PLACEHOLDER-7 num)))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-8] (let* [PLACEHOLDER-8 PLACEHOLDER-8 PLACEHOLDER-8 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-8 0 nil) PLACEHOLDER-9 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-8 1 nil) PLACEHOLDER-10 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-8 2 nil) PLACEHOLDER-11 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-8 3 nil)] (let* [PLACEHOLDER-11 (mod PLACEHOLDER-9 10)] [PLACEHOLDER-8 (quot PLACEHOLDER-9 10) PLACEHOLDER-11 (+ PLACEHOLDER-11 (PLACEHOLDER-0 PLACEHOLDER-11 PLACEHOLDER-8))]))))) (def armstrong? (fn* ([num] (if (zero? num) true (= num (last (last (take-while (fn* ([PLACEHOLDER-15] (let* [PLACEHOLDER-15 PLACEHOLDER-15 PLACEHOLDER-15 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-15 0 nil) PLACEHOLDER-6 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-15 1 nil) PLACEHOLDER-6 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-15 2 nil) PLACEHOLDER-19 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-15 3 nil)] (let* [PLACEHOLDER-19 (pos? PLACEHOLDER-6)] (if PLACEHOLDER-19 PLACEHOLDER-19 (pos? PLACEHOLDER-6)))))) (iterate PLACEHOLDER-8 [(PLACEHOLDER-7 num) num 0 0])))))))))))