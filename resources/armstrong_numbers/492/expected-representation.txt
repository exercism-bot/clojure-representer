((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (loop* [PLACEHOLDER-0 (quote ()) PLACEHOLDER-1 num] (if (zero? PLACEHOLDER-1) PLACEHOLDER-0 (recur (conj PLACEHOLDER-0 (int (mod PLACEHOLDER-1 10))) (quot PLACEHOLDER-1 10))))))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-4 PLACEHOLDER-4] (loop* [PLACEHOLDER-1 PLACEHOLDER-4 PLACEHOLDER-0 1] (if (zero? PLACEHOLDER-1) PLACEHOLDER-0 (recur (dec PLACEHOLDER-1) (* PLACEHOLDER-0 PLACEHOLDER-4))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-0 num) PLACEHOLDER-4 (count PLACEHOLDER-5)] (= num (reduce + (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-4 PLACEHOLDER-4 PLACEHOLDER-6)) PLACEHOLDER-5)))))))))