((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-1 (fn* ([num] (loop* [PLACEHOLDER-3 (quote ()) PLACEHOLDER-4 num] (if (zero? PLACEHOLDER-4) PLACEHOLDER-3 (recur (conj PLACEHOLDER-3 (int (mod PLACEHOLDER-4 10))) (quot PLACEHOLDER-4 10))))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-5 PLACEHOLDER-0] (loop* [PLACEHOLDER-4 PLACEHOLDER-5 PLACEHOLDER-3 1] (if (zero? PLACEHOLDER-4) PLACEHOLDER-3 (recur (dec PLACEHOLDER-4) (* PLACEHOLDER-3 PLACEHOLDER-0))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-1 num) PLACEHOLDER-5 (count PLACEHOLDER-6)] (= num (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-2 PLACEHOLDER-5 PLACEHOLDER-7)) PLACEHOLDER-6)))))))))