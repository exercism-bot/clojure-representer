((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-1 (fn* ([num] (loop* [PLACEHOLDER-4 (quote ()) PLACEHOLDER-5 num] (if (zero? PLACEHOLDER-5) PLACEHOLDER-4 (recur (conj PLACEHOLDER-4 (int (mod PLACEHOLDER-5 10))) (quot PLACEHOLDER-5 10))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-6 PLACEHOLDER-0] (loop* [PLACEHOLDER-5 PLACEHOLDER-6 PLACEHOLDER-4 1] (if (zero? PLACEHOLDER-5) PLACEHOLDER-4 (recur (dec PLACEHOLDER-5) (* PLACEHOLDER-4 PLACEHOLDER-0))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-7 (PLACEHOLDER-1 num) PLACEHOLDER-6 (count PLACEHOLDER-7)] (= num (reduce + (map (fn* [PLACEHOLDER-2] (PLACEHOLDER-3 PLACEHOLDER-6 PLACEHOLDER-2)) PLACEHOLDER-7)))))))))