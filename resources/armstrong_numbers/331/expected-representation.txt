((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (if (= num 0) (quote ()) (cons (mod num 10) (PLACEHOLDER-4 (long (/ num 10)))))))) (def PLACEHOLDER-3 (fn* ([num PLACEHOLDER-2] (if (= PLACEHOLDER-2 0) 1 (* num (PLACEHOLDER-3 num (- PLACEHOLDER-2 1))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-4 PLACEHOLDER-2] (if (empty? PLACEHOLDER-4) (quote ()) (cons (PLACEHOLDER-3 (first PLACEHOLDER-4) PLACEHOLDER-2) (PLACEHOLDER-5 (rest PLACEHOLDER-4) PLACEHOLDER-2)))))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-4] (if (empty? PLACEHOLDER-4) 0 (+ (first PLACEHOLDER-4) (PLACEHOLDER-0 (rest PLACEHOLDER-4))))))) (def PLACEHOLDER-1 (fn* ([num] (PLACEHOLDER-0 (PLACEHOLDER-5 (reverse (PLACEHOLDER-4 num)) (count (PLACEHOLDER-4 num))))))) (def armstrong? (fn* ([num] (= (PLACEHOLDER-1 num) num))))))