((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (if (= num 0) (quote ()) (cons (mod num 10) (PLACEHOLDER-0 (long (/ num 10)))))))) (def PLACEHOLDER-0 (fn* ([num PLACEHOLDER-1] (if (= PLACEHOLDER-1 0) 1 (* num (PLACEHOLDER-0 num (- PLACEHOLDER-1 1))))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (if (empty? PLACEHOLDER-0) (quote ()) (cons (PLACEHOLDER-0 (first PLACEHOLDER-0) PLACEHOLDER-1) (PLACEHOLDER-2 (rest PLACEHOLDER-0) PLACEHOLDER-1)))))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-0] (if (empty? PLACEHOLDER-0) 0 (+ (first PLACEHOLDER-0) (PLACEHOLDER-4 (rest PLACEHOLDER-0))))))) (def PLACEHOLDER-4 (fn* ([num] (PLACEHOLDER-4 (PLACEHOLDER-2 (reverse (PLACEHOLDER-0 num)) (count (PLACEHOLDER-0 num))))))) (def armstrong? (fn* ([num] (= (PLACEHOLDER-4 num) num))))))