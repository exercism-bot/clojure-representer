(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-1]
    (fn*
     ([PLACEHOLDER-2]
      (do
       (def
        PLACEHOLDER-7
        (bigdec (java.lang.Math/pow PLACEHOLDER-2 PLACEHOLDER-1)))
       (println PLACEHOLDER-7)
       PLACEHOLDER-7))))))
 (def
  PLACEHOLDER-8
  (fn* ([PLACEHOLDER-3] (java.lang.Integer/parseInt PLACEHOLDER-3))))
 (def
  PLACEHOLDER-9
  (fn* ([PLACEHOLDER-4] (map PLACEHOLDER-8 (map str PLACEHOLDER-4)))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-5]
    (do
     (def PLACEHOLDER-11 (str PLACEHOLDER-5))
     (def PLACEHOLDER-12 (clojure.lang.RT/count PLACEHOLDER-11))
     (println "number size:" PLACEHOLDER-12)
     (def PLACEHOLDER-13 (seq PLACEHOLDER-11))
     (def PLACEHOLDER-14 (PLACEHOLDER-9 PLACEHOLDER-13))
     (def
      PLACEHOLDER-15
      (map (PLACEHOLDER-6 PLACEHOLDER-12) PLACEHOLDER-14))
     (def PLACEHOLDER-16 (reduce + PLACEHOLDER-15))
     (println "sum_of_powers: " PLACEHOLDER-16)
     (clojure.lang.Util/equiv PLACEHOLDER-5 PLACEHOLDER-16))))))
