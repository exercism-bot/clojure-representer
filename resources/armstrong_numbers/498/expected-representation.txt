((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (loop* [PLACEHOLDER-0 1 PLACEHOLDER-0 PLACEHOLDER-0] (if (= PLACEHOLDER-0 0) PLACEHOLDER-0 (recur (* PLACEHOLDER-0 PLACEHOLDER-0) (dec PLACEHOLDER-0))))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (int (/ (mod PLACEHOLDER-0 (PLACEHOLDER-0 10 PLACEHOLDER-0)) (PLACEHOLDER-0 10 (dec PLACEHOLDER-0))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-0] (loop* [PLACEHOLDER-0 [] PLACEHOLDER-3 1] (let* [PLACEHOLDER-3 (conj PLACEHOLDER-0 (PLACEHOLDER-2 PLACEHOLDER-0 PLACEHOLDER-3))] (if (< PLACEHOLDER-0 (PLACEHOLDER-0 10 PLACEHOLDER-3)) PLACEHOLDER-3 (recur PLACEHOLDER-3 (inc PLACEHOLDER-3)))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-0] (let* [PLACEHOLDER-6 (PLACEHOLDER-3 PLACEHOLDER-0) PLACEHOLDER-7 (count PLACEHOLDER-6)] (loop* [PLACEHOLDER-7 PLACEHOLDER-6 PLACEHOLDER-0 0] (if (empty? PLACEHOLDER-7) PLACEHOLDER-0 (recur (rest PLACEHOLDER-7) (+ PLACEHOLDER-0 (PLACEHOLDER-0 (first PLACEHOLDER-7) PLACEHOLDER-7))))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-5 num)))))))