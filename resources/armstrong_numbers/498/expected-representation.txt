((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-0 PLACEHOLDER-3] (loop* [PLACEHOLDER-2 1 PLACEHOLDER-3 PLACEHOLDER-3] (if (= PLACEHOLDER-3 0) PLACEHOLDER-2 (recur (* PLACEHOLDER-0 PLACEHOLDER-2) (dec PLACEHOLDER-3))))))) (def PLACEHOLDER-11 (fn* ([PLACEHOLDER-0 PLACEHOLDER-3] (int (/ (mod PLACEHOLDER-0 (PLACEHOLDER-4 10 PLACEHOLDER-3)) (PLACEHOLDER-4 10 (dec PLACEHOLDER-3))))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-0] (loop* [PLACEHOLDER-2 [] PLACEHOLDER-6 1] (let* [PLACEHOLDER-8 (conj PLACEHOLDER-2 (PLACEHOLDER-11 PLACEHOLDER-0 PLACEHOLDER-6))] (if (< PLACEHOLDER-0 (PLACEHOLDER-4 10 PLACEHOLDER-6)) PLACEHOLDER-8 (recur PLACEHOLDER-8 (inc PLACEHOLDER-6)))))))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-0] (let* [PLACEHOLDER-5 (PLACEHOLDER-9 PLACEHOLDER-0) PLACEHOLDER-10 (count PLACEHOLDER-5)] (loop* [PLACEHOLDER-7 PLACEHOLDER-5 PLACEHOLDER-2 0] (if (empty? PLACEHOLDER-7) PLACEHOLDER-2 (recur (rest PLACEHOLDER-7) (+ PLACEHOLDER-2 (PLACEHOLDER-4 (first PLACEHOLDER-7) PLACEHOLDER-10))))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-1 num)))))))