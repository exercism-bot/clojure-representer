((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (loop* [PLACEHOLDER-0 num PLACEHOLDER-0 0M] (if (zero? PLACEHOLDER-0) PLACEHOLDER-0 (recur (long (/ PLACEHOLDER-0 10)) (inc PLACEHOLDER-0))))))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (let* [PLACEHOLDER-1 (new PLACEHOLDER-1 PLACEHOLDER-0)] (loop* [PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-0 1M] (if (zero? PLACEHOLDER-0) PLACEHOLDER-0 (recur (dec PLACEHOLDER-0) (* PLACEHOLDER-0 PLACEHOLDER-1)))))))) (def armstrong? (fn* ([num] (= (new PLACEHOLDER-1 num) (let* [PLACEHOLDER-3 (PLACEHOLDER-0 num)] (loop* [PLACEHOLDER-0 num PLACEHOLDER-0 0M] (if (zero? PLACEHOLDER-0) PLACEHOLDER-0 (recur (long (/ PLACEHOLDER-0 10)) (+ PLACEHOLDER-0 (PLACEHOLDER-0 (mod PLACEHOLDER-0 10) PLACEHOLDER-3))))))))))))