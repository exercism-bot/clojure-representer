((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([num] (loop* [PLACEHOLDER-0 num PLACEHOLDER-1 0M] (if (zero? PLACEHOLDER-0) PLACEHOLDER-1 (recur (long (/ PLACEHOLDER-0 10)) (inc PLACEHOLDER-1))))))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-2 PLACEHOLDER-3] (let* [PLACEHOLDER-6 (new PLACEHOLDER-7 PLACEHOLDER-2)] (loop* [PLACEHOLDER-0 PLACEHOLDER-3 PLACEHOLDER-1 1M] (if (zero? PLACEHOLDER-0) PLACEHOLDER-1 (recur (dec PLACEHOLDER-0) (* PLACEHOLDER-1 PLACEHOLDER-6)))))))) (def armstrong? (fn* ([num] (= (new PLACEHOLDER-7 num) (let* [PLACEHOLDER-5 (PLACEHOLDER-8 num)] (loop* [PLACEHOLDER-0 num PLACEHOLDER-1 0M] (if (zero? PLACEHOLDER-0) PLACEHOLDER-1 (recur (long (/ PLACEHOLDER-0 10)) (+ PLACEHOLDER-1 (PLACEHOLDER-4 (mod PLACEHOLDER-0 10) PLACEHOLDER-5))))))))))))