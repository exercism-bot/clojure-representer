((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-2 PLACEHOLDER-15] (reduce * 1 (repeat PLACEHOLDER-15 PLACEHOLDER-2))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-5] (map (fn* [PLACEHOLDER-9] (read-string (str PLACEHOLDER-9))) (str PLACEHOLDER-5))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-10] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-14 ([PLACEHOLDER-12] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-12 PLACEHOLDER-12] (let* [PLACEHOLDER-12 (clojure.core/seq PLACEHOLDER-12)] (if PLACEHOLDER-12 (do (if (clojure.core/chunked-seq? PLACEHOLDER-12) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-12) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-11 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-3 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-3 PLACEHOLDER-4) (let* [PLACEHOLDER-1 (clojure.core/nth-13 PLACEHOLDER-3)] (do (clojure.core/chunk-append PLACEHOLDER-11 (PLACEHOLDER-6 PLACEHOLDER-1 (count PLACEHOLDER-10))) (recur (clojure.core/unchecked-inc PLACEHOLDER-3)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-11) (PLACEHOLDER-14 (clojure.core/chunk-rest PLACEHOLDER-12))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-11) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-12)] (clojure.core/cons (PLACEHOLDER-6 PLACEHOLDER-1 (count PLACEHOLDER-10)) (PLACEHOLDER-14 (clojure.core/rest PLACEHOLDER-12)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-10))))) (def armstrong? (fn* ([num] (= (reduce + (PLACEHOLDER-7 (PLACEHOLDER-8 num))) num))))))