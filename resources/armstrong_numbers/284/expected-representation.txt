((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-2 PLACEHOLDER-15] (reduce * 1 (repeat PLACEHOLDER-15 PLACEHOLDER-2))))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-7] (map (fn* [PLACEHOLDER-4] (read-string (str PLACEHOLDER-4))) (str PLACEHOLDER-7))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-12] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-13 ([PLACEHOLDER-11] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-11 PLACEHOLDER-11] (let* [PLACEHOLDER-11 (clojure.core/seq PLACEHOLDER-11)] (if PLACEHOLDER-11 (do (if (clojure.core/chunked-seq? PLACEHOLDER-11) (let* [PLACEHOLDER-14 (clojure.core/chunk-first PLACEHOLDER-11) PLACEHOLDER-6 (clojure.core/int (clojure.core/count PLACEHOLDER-14)) PLACEHOLDER-5 (clojure.core/chunk-buffer PLACEHOLDER-6)] (if (loop* [PLACEHOLDER-3 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-3 PLACEHOLDER-6) (let* [PLACEHOLDER-1 (clojure.core/nth PLACEHOLDER-14 PLACEHOLDER-3)] (do (clojure.core/chunk-append PLACEHOLDER-5 (PLACEHOLDER-8 PLACEHOLDER-1 (count PLACEHOLDER-12))) (recur (clojure.core/unchecked-inc PLACEHOLDER-3)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) (PLACEHOLDER-13 (clojure.core/chunk-rest PLACEHOLDER-11))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-5) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-11)] (clojure.core/cons (PLACEHOLDER-8 PLACEHOLDER-1 (count PLACEHOLDER-12)) (PLACEHOLDER-13 (clojure.core/rest PLACEHOLDER-11)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-12))))) (def armstrong? (fn* ([num] (= (reduce + (PLACEHOLDER-9 (PLACEHOLDER-10 num))) num))))))