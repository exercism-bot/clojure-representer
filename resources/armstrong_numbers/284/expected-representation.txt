((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (reduce * 1 (repeat PLACEHOLDER-1 PLACEHOLDER-0))))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-2] (map (fn* [PLACEHOLDER-2] (read-string (str PLACEHOLDER-2))) (str PLACEHOLDER-2))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-2] (let* [PLACEHOLDER-2 (fn* PLACEHOLDER-2 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-4 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-4)) PLACEHOLDER-6 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-6 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-6 PLACEHOLDER-5) (let* [PLACEHOLDER-8 (clojure.core/nth-13 PLACEHOLDER-6)] (do (clojure.core/chunk-append PLACEHOLDER-6 (PLACEHOLDER-0 PLACEHOLDER-8 (count PLACEHOLDER-2))) (recur (clojure.core/unchecked-inc PLACEHOLDER-6)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) (PLACEHOLDER-2 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) nil))) (let* [PLACEHOLDER-8 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (PLACEHOLDER-0 PLACEHOLDER-8 (count PLACEHOLDER-2)) (PLACEHOLDER-2 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-2 PLACEHOLDER-2))))) (def armstrong? (fn* ([num] (= (reduce + (PLACEHOLDER-2 (PLACEHOLDER-1 num))) num))))))