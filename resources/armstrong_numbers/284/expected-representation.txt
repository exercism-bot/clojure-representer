((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-3 PLACEHOLDER-15] (reduce * 1 (repeat PLACEHOLDER-15 PLACEHOLDER-3))))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-6] (map (fn* [PLACEHOLDER-0] (read-string (str PLACEHOLDER-0))) (str PLACEHOLDER-6))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-13] (let* [PLACEHOLDER-1 (fn* PLACEHOLDER-4 ([PLACEHOLDER-11] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-11 PLACEHOLDER-11] (let* [PLACEHOLDER-11 (clojure.core/seq PLACEHOLDER-11)] (if PLACEHOLDER-11 (do (if (clojure.core/chunked-seq? PLACEHOLDER-11) (let* [PLACEHOLDER-14 (clojure.core/chunk-first PLACEHOLDER-11) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-14)) PLACEHOLDER-12 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-9 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-9 PLACEHOLDER-5) (let* [PLACEHOLDER-2 (clojure.core/nth PLACEHOLDER-14 PLACEHOLDER-9)] (do (clojure.core/chunk-append PLACEHOLDER-12 (PLACEHOLDER-7 PLACEHOLDER-2 (count PLACEHOLDER-13))) (recur (clojure.core/unchecked-inc PLACEHOLDER-9)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-12) (PLACEHOLDER-4 (clojure.core/chunk-rest PLACEHOLDER-11))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-12) nil))) (let* [PLACEHOLDER-2 (clojure.core/first PLACEHOLDER-11)] (clojure.core/cons (PLACEHOLDER-7 PLACEHOLDER-2 (count PLACEHOLDER-13)) (PLACEHOLDER-4 (clojure.core/rest PLACEHOLDER-11)))))))))))))] (PLACEHOLDER-1 PLACEHOLDER-13))))) (def armstrong? (fn* ([num] (= (reduce + (PLACEHOLDER-8 (PLACEHOLDER-10 num))) num))))))