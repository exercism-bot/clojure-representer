((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-3 PLACEHOLDER-15] (reduce * 1 (repeat PLACEHOLDER-15 PLACEHOLDER-3))))) (def PLACEHOLDER-11 (fn* ([PLACEHOLDER-8] (map (fn* [PLACEHOLDER-5] (read-string (str PLACEHOLDER-5))) (str PLACEHOLDER-8))))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-12] (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-7 ([PLACEHOLDER-6] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-6 PLACEHOLDER-6] (let* [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-6)] (if PLACEHOLDER-6 (do (if (clojure.core/chunked-seq? PLACEHOLDER-6) (let* [PLACEHOLDER-14 (clojure.core/chunk-first PLACEHOLDER-6) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-14)) PLACEHOLDER-2 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-13 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-13 PLACEHOLDER-4) (let* [PLACEHOLDER-1 (clojure.core/nth PLACEHOLDER-14 PLACEHOLDER-13)] (do (clojure.core/chunk-append PLACEHOLDER-2 (PLACEHOLDER-9 PLACEHOLDER-1 (count PLACEHOLDER-12))) (recur (clojure.core/unchecked-inc PLACEHOLDER-13)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) (PLACEHOLDER-7 (clojure.core/chunk-rest PLACEHOLDER-6))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-6)] (clojure.core/cons (PLACEHOLDER-9 PLACEHOLDER-1 (count PLACEHOLDER-12)) (PLACEHOLDER-7 (clojure.core/rest PLACEHOLDER-6)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-12))))) (def armstrong? (fn* ([num] (= (reduce + (PLACEHOLDER-10 (PLACEHOLDER-11 num))) num))))))