((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-6 (fn* ([num] (let* [PLACEHOLDER-1 (mod num 10) PLACEHOLDER-4 (if (zero? num) 0 (bigint (/ num 10)))] (if (zero? PLACEHOLDER-4) [(int PLACEHOLDER-1)] (conj (PLACEHOLDER-6 PLACEHOLDER-4) (int PLACEHOLDER-1))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-5 PLACEHOLDER-0] (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-0))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-6 num) PLACEHOLDER-2 (partial PLACEHOLDER-3 (count PLACEHOLDER-6))] (== num (reduce + (map PLACEHOLDER-2 PLACEHOLDER-6)))))))))