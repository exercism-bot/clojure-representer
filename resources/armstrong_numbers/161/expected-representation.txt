((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (let* [PLACEHOLDER-0 (mod num 10) PLACEHOLDER-1 (if (zero? num) 0 (bigint (/ num 10)))] (if (zero? PLACEHOLDER-1) [(int PLACEHOLDER-0)] (conj (PLACEHOLDER-0 PLACEHOLDER-1) (int PLACEHOLDER-0))))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-4 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-4))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-0 (PLACEHOLDER-0 num) PLACEHOLDER-6 (partial PLACEHOLDER-3 (count PLACEHOLDER-0))] (== num (reduce + (map PLACEHOLDER-6 PLACEHOLDER-0)))))))))