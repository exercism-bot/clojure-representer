((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (reduce (fn* ([PLACEHOLDER-1 PLACEHOLDER-1] (*' PLACEHOLDER-1 PLACEHOLDER-0))) 1N (range PLACEHOLDER-0))))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-4] (int (clojure.math/log10 PLACEHOLDER-4))))) (def armstrong? (fn* ([PLACEHOLDER-4] (let* [PLACEHOLDER-5 (zero? PLACEHOLDER-4)] (if PLACEHOLDER-5 PLACEHOLDER-5 (let* [PLACEHOLDER-7 (bigint PLACEHOLDER-4) PLACEHOLDER-7 (inc (PLACEHOLDER-3 PLACEHOLDER-4))] (loop* [PLACEHOLDER-7 PLACEHOLDER-7 PLACEHOLDER-4 PLACEHOLDER-7] (if (zero? PLACEHOLDER-4) (zero? PLACEHOLDER-7) (recur (-' PLACEHOLDER-7 (PLACEHOLDER-0 (rem PLACEHOLDER-4 10) PLACEHOLDER-7)) (quot PLACEHOLDER-4 10))))))))))))