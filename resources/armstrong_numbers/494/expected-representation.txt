((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([num PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 num))))) (def PLACEHOLDER-0 (fn* ([num] (loop* [num num PLACEHOLDER-6 (quote ())] (if (< num 10) (conj PLACEHOLDER-6 num) (recur (quot num 10) (conj PLACEHOLDER-6 (mod num 10)))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-0 num) PLACEHOLDER-2 (count PLACEHOLDER-6) PLACEHOLDER-1 (map (fn* [PLACEHOLDER-5] (PLACEHOLDER-3 PLACEHOLDER-5 PLACEHOLDER-2)) PLACEHOLDER-6) PLACEHOLDER-7 (reduce + PLACEHOLDER-1)] (= PLACEHOLDER-7 num)))))))