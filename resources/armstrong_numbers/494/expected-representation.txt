((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num PLACEHOLDER-5] (reduce * (repeat PLACEHOLDER-5 num))))) (def PLACEHOLDER-1 (fn* ([num] (loop* [num num PLACEHOLDER-6 (quote ())] (if (< num 10) (conj PLACEHOLDER-6 num) (recur (quot num 10) (conj PLACEHOLDER-6 (mod num 10)))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-1 num) PLACEHOLDER-3 (count PLACEHOLDER-6) PLACEHOLDER-2 (map (fn* [PLACEHOLDER-0] (PLACEHOLDER-4 PLACEHOLDER-0 PLACEHOLDER-3)) PLACEHOLDER-6) PLACEHOLDER-7 (reduce + PLACEHOLDER-2)] (= PLACEHOLDER-7 num)))))))