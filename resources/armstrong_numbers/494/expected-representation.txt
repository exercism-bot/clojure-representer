((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num PLACEHOLDER-0] (reduce * (repeat PLACEHOLDER-0 num))))) (def PLACEHOLDER-1 (fn* ([num] (loop* [num num PLACEHOLDER-2 (quote ())] (if (< num 10) (conj PLACEHOLDER-2 num) (recur (quot num 10) (conj PLACEHOLDER-2 (mod num 10)))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-2 (PLACEHOLDER-1 num) PLACEHOLDER-4 (count PLACEHOLDER-2) PLACEHOLDER-5 (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-0 PLACEHOLDER-6 PLACEHOLDER-4)) PLACEHOLDER-2) PLACEHOLDER-6 (reduce + PLACEHOLDER-5)] (= PLACEHOLDER-6 num)))))))