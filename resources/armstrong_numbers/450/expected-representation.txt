((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (/ (- num (mod num 10)) 10)))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-1 PLACEHOLDER-2] (loop* [PLACEHOLDER-2 1 PLACEHOLDER-2 PLACEHOLDER-2] (if (zero? PLACEHOLDER-2) PLACEHOLDER-2 (recur (* PLACEHOLDER-1 PLACEHOLDER-2) (dec PLACEHOLDER-2))))))) (def PLACEHOLDER-4 (fn* ([num PLACEHOLDER-5] (if (< num 10) (long (PLACEHOLDER-0 num PLACEHOLDER-5)) (long (+ (PLACEHOLDER-0 (mod num 10) PLACEHOLDER-5) (PLACEHOLDER-4 (PLACEHOLDER-0 num) PLACEHOLDER-5))))))) (def PLACEHOLDER-8 (fn* ([num] (if (= 0 num) (int 1) (int (+ 1 (PLACEHOLDER-8 num))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-4 num (PLACEHOLDER-8 num))))))))