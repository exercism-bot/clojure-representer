((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-2] (if (not (zero? PLACEHOLDER-2)) (do (concat (PLACEHOLDER-3 (quot PLACEHOLDER-2 10)) [(mod PLACEHOLDER-2 10)])))))) (def PLACEHOLDER-0 (fn* ([num count] (if (zero? count) 1 (do (* (PLACEHOLDER-0 num (- count 1)) num)))))) (def armstrong? (fn* ([PLACEHOLDER-2] (let* [PLACEHOLDER-1 (PLACEHOLDER-3 PLACEHOLDER-2) PLACEHOLDER-4 (count PLACEHOLDER-1)] (= PLACEHOLDER-2 (reduce + (map (fn* ([PLACEHOLDER-2] (PLACEHOLDER-0 PLACEHOLDER-2 PLACEHOLDER-4))) PLACEHOLDER-1)))))))))