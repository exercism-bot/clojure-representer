((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (if (not (zero? PLACEHOLDER-0)) (do (concat (PLACEHOLDER-0 (quot PLACEHOLDER-0 10)) [(mod PLACEHOLDER-0 10)])))))) (def PLACEHOLDER-2 (fn* ([num count] (if (zero? count) 1 (do (* (PLACEHOLDER-2 num (- count 1)) num)))))) (def armstrong? (fn* ([PLACEHOLDER-0] (let* [PLACEHOLDER-2 (PLACEHOLDER-0 PLACEHOLDER-0) PLACEHOLDER-2 (count PLACEHOLDER-2)] (= PLACEHOLDER-0 (reduce + (map (fn* ([PLACEHOLDER-0] (PLACEHOLDER-2 PLACEHOLDER-0 PLACEHOLDER-2))) PLACEHOLDER-2)))))))))