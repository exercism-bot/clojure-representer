((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (if (< PLACEHOLDER-0 10) [PLACEHOLDER-0] (conj (PLACEHOLDER-0 (quot PLACEHOLDER-0 10)) (mod PLACEHOLDER-0 10)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-0 (clojure.core/-new-var) PLACEHOLDER-2 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-0 (clojure.core/constantly (fn* PLACEHOLDER-0 ([PLACEHOLDER-0] (if (< PLACEHOLDER-0 10N) [PLACEHOLDER-0] (conj (PLACEHOLDER-0 (quot PLACEHOLDER-0 10N)) (mod PLACEHOLDER-0 10N))))))) (clojure.core/alter-var-root PLACEHOLDER-2 (clojure.core/constantly (fn* PLACEHOLDER-2 ([PLACEHOLDER-2 PLACEHOLDER-0] (if (zero? PLACEHOLDER-0) 1N (* PLACEHOLDER-2 (PLACEHOLDER-2 PLACEHOLDER-2 (dec PLACEHOLDER-0)))))))) (let* [PLACEHOLDER-0 (clojure.core/var-get PLACEHOLDER-0) PLACEHOLDER-2 (clojure.core/var-get PLACEHOLDER-2)] (let* [PLACEHOLDER-7 (PLACEHOLDER-0 num) PLACEHOLDER-7 (count PLACEHOLDER-7) PLACEHOLDER-7 (fn* ([PLACEHOLDER-2] (PLACEHOLDER-2 PLACEHOLDER-2 PLACEHOLDER-7))) PLACEHOLDER-9 (fn* ([PLACEHOLDER-9] (map PLACEHOLDER-7 PLACEHOLDER-9))) PLACEHOLDER-9 (apply + (PLACEHOLDER-9 PLACEHOLDER-7))] (= num PLACEHOLDER-9)))))))))