((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-2] (if (< PLACEHOLDER-2 10) [PLACEHOLDER-2] (conj (PLACEHOLDER-9 (quot PLACEHOLDER-2 10)) (mod PLACEHOLDER-2 10)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-9 (clojure.core/-new-var) PLACEHOLDER-7 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-9 (clojure.core/constantly (fn* PLACEHOLDER-9 ([PLACEHOLDER-2] (if (< PLACEHOLDER-2 10N) [PLACEHOLDER-2] (conj (PLACEHOLDER-9 (quot PLACEHOLDER-2 10N)) (mod PLACEHOLDER-2 10N))))))) (clojure.core/alter-var-root PLACEHOLDER-7 (clojure.core/constantly (fn* PLACEHOLDER-7 ([PLACEHOLDER-0 PLACEHOLDER-2] (if (zero? PLACEHOLDER-2) 1N (* PLACEHOLDER-0 (PLACEHOLDER-7 PLACEHOLDER-0 (dec PLACEHOLDER-2)))))))) (let* [PLACEHOLDER-9 (clojure.core/var-get PLACEHOLDER-9) PLACEHOLDER-7 (clojure.core/var-get PLACEHOLDER-7)] (let* [PLACEHOLDER-1 (PLACEHOLDER-9 num) PLACEHOLDER-5 (count PLACEHOLDER-1) PLACEHOLDER-6 (fn* ([PLACEHOLDER-0] (PLACEHOLDER-7 PLACEHOLDER-0 PLACEHOLDER-5))) PLACEHOLDER-3 (fn* ([PLACEHOLDER-4] (map PLACEHOLDER-6 PLACEHOLDER-4))) PLACEHOLDER-8 (apply + (PLACEHOLDER-3 PLACEHOLDER-1))] (= num PLACEHOLDER-8)))))))))