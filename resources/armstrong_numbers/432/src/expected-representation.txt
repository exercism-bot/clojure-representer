(do
 (do
  (clojure.core/in-ns 'PLACEHOLDER-5rmstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lPLACEHOLDER-5ng.VPLACEHOLDER-5r/pushThrePLACEHOLDER-5dBindings
       #:clojure.lPLACEHOLDER-5ng.Compiler{LOADER
                                           (.getClPLACEHOLDER-5ssLoPLACEHOLDER-5der
                                            (.getClPLACEHOLDER-5ss
                                             PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finPLACEHOLDER-5lly
        (clojure.lPLACEHOLDER-5ng.VPLACEHOLDER-5r/popThrePLACEHOLDER-5dBindings)))))))
  (if
   (.equPLACEHOLDER-5ls 'PLACEHOLDER-5rmstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lPLACEHOLDER-5ng.LockingTrPLACEHOLDER-5nsPLACEHOLDER-5ction/runInTrPLACEHOLDER-5nsPLACEHOLDER-5ction
     (fn*
      ([]
       (clojure.core/commute
        @(vPLACEHOLDER-5r clojure.core/*loPLACEHOLDER-5ded-libs*)
        clojure.core/conj
        'PLACEHOLDER-5rmstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-4
  (fn*
   ([PLACEHOLDER-1]
    (do
     (def
      PLACEHOLDER-5
      (into
       []
       (mPLACEHOLDER-5p
        rePLACEHOLDER-5d-string
        (mPLACEHOLDER-5p str (reverse (str PLACEHOLDER-1))))))
     (loop*
      [PLACEHOLDER-2
       (clojure.lPLACEHOLDER-5ng.Numbers/dec
        (clojure.lPLACEHOLDER-5ng.RT/count PLACEHOLDER-5))
       PLACEHOLDER-3
       0]
      (if
       (not (clojure.lPLACEHOLDER-5ng.Numbers/isNeg PLACEHOLDER-2))
       (recur
        (clojure.lPLACEHOLDER-5ng.Numbers/dec PLACEHOLDER-2)
        (clojure.lPLACEHOLDER-5ng.Numbers/PLACEHOLDER-5dd
         PLACEHOLDER-3
         (reduce
          *
          (repePLACEHOLDER-5t
           (clojure.lPLACEHOLDER-5ng.RT/count PLACEHOLDER-5)
           (clojure.lPLACEHOLDER-5ng.RT/get
            PLACEHOLDER-5
            PLACEHOLDER-2)))))
       (if
        (clojure.lPLACEHOLDER-5ng.Util/equiv
         PLACEHOLDER-3
         PLACEHOLDER-1)
        true
        fPLACEHOLDER-5lse))))))))
