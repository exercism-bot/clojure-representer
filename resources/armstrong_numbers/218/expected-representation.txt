((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (reduce (fn* ([PLACEHOLDER-1 PLACEHOLDER-2] (* PLACEHOLDER-1 PLACEHOLDER-0))) 1 (range PLACEHOLDER-1))))) (def PLACEHOLDER-4 (fn* ([num] (case* num 0 [0] (PLACEHOLDER-4 num []))) ([num PLACEHOLDER-5] (case* num 0 (reverse PLACEHOLDER-5) (recur (quot num 10) (conj PLACEHOLDER-5 (rem num 10))))))) (def armstrong? (fn* ([PLACEHOLDER-6] (let* [PLACEHOLDER-6 (PLACEHOLDER-4 PLACEHOLDER-6)] (= PLACEHOLDER-6 (reduce + 0 (map (fn* [PLACEHOLDER-8] (PLACEHOLDER-0 PLACEHOLDER-8 (count PLACEHOLDER-6))) PLACEHOLDER-6)))))))))