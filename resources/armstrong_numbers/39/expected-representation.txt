((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (let* [PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (* PLACEHOLDER-0 PLACEHOLDER-0)))] (if (zero? PLACEHOLDER-0) 1 (if (even? PLACEHOLDER-0) (PLACEHOLDER-0 (PLACEHOLDER-0 PLACEHOLDER-0 (/ PLACEHOLDER-0 2))) (if :else (* PLACEHOLDER-0 (PLACEHOLDER-0 PLACEHOLDER-0 (dec PLACEHOLDER-0))) nil))))))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-0] (map (fn* [PLACEHOLDER-3] (Character/digit PLACEHOLDER-3 10)) (PLACEHOLDER-4 (PLACEHOLDER-5 PLACEHOLDER-0)))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-6 (PLACEHOLDER-2 num) PLACEHOLDER-7 (count PLACEHOLDER-6) PLACEHOLDER-8 (reduce + (map (fn* [PLACEHOLDER-9] (PLACEHOLDER-0 PLACEHOLDER-9 PLACEHOLDER-7)) PLACEHOLDER-6))] (= PLACEHOLDER-8 num)))))))