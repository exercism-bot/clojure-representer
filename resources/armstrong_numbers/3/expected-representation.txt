((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (loop* [PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-0] (if (zero? PLACEHOLDER-1) PLACEHOLDER-1 (recur (dec PLACEHOLDER-1) (* PLACEHOLDER-1 PLACEHOLDER-0))))))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-4 PLACEHOLDER-4] [(bigint (/ PLACEHOLDER-4 PLACEHOLDER-4)) (mod PLACEHOLDER-4 PLACEHOLDER-4)]))) (def PLACEHOLDER-6 (fn* ([num] (loop* [PLACEHOLDER-7 0 PLACEHOLDER-7 num PLACEHOLDER-8 []] (let* [PLACEHOLDER-8 (PLACEHOLDER-4 PLACEHOLDER-7 10) PLACEHOLDER-9 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-8 0 nil) mod ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-8 1 nil)] (if (zero? PLACEHOLDER-9) (reduce + (map (fn* [PLACEHOLDER-11] (PLACEHOLDER-0 PLACEHOLDER-11 PLACEHOLDER-7)) (cons mod PLACEHOLDER-8))) (recur (inc PLACEHOLDER-7) PLACEHOLDER-9 (cons mod PLACEHOLDER-8)))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-6 num)))))))