((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-2 PLACEHOLDER-1] (loop* [PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-7 PLACEHOLDER-2] (if (zero? PLACEHOLDER-1) PLACEHOLDER-7 (recur (dec PLACEHOLDER-1) (* PLACEHOLDER-7 PLACEHOLDER-2))))))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-4 PLACEHOLDER-3] [(bigint (/ PLACEHOLDER-4 PLACEHOLDER-3)) (mod PLACEHOLDER-4 PLACEHOLDER-3)]))) (def PLACEHOLDER-6 (fn* ([num] (loop* [PLACEHOLDER-9 0 PLACEHOLDER-5 num PLACEHOLDER-13 []] (let* [PLACEHOLDER-10 (PLACEHOLDER-0 PLACEHOLDER-5 10) PLACEHOLDER-11 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-10 0 nil) mod (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-10 1 nil)] (if (zero? PLACEHOLDER-11) (reduce + (map (fn* [PLACEHOLDER-12] (PLACEHOLDER-8 PLACEHOLDER-12 PLACEHOLDER-9)) (cons mod PLACEHOLDER-13))) (recur (inc PLACEHOLDER-9) PLACEHOLDER-11 (cons mod PLACEHOLDER-13)))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-6 num)))))))