((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-3 PLACEHOLDER-1] (loop* [PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-8 PLACEHOLDER-3] (if (zero? PLACEHOLDER-1) PLACEHOLDER-8 (recur (dec PLACEHOLDER-1) (* PLACEHOLDER-8 PLACEHOLDER-3))))))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-5 PLACEHOLDER-4] [(bigint (/ PLACEHOLDER-5 PLACEHOLDER-4)) (mod PLACEHOLDER-5 PLACEHOLDER-4)]))) (def PLACEHOLDER-7 (fn* ([num] (loop* [PLACEHOLDER-10 0 PLACEHOLDER-6 num PLACEHOLDER-12 []] (let* [PLACEHOLDER-2 (PLACEHOLDER-0 PLACEHOLDER-6 10) PLACEHOLDER-11 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-2 0 nil) mod (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-2 1 nil)] (if (zero? PLACEHOLDER-11) (reduce + (map (fn* [PLACEHOLDER-13] (PLACEHOLDER-9 PLACEHOLDER-13 PLACEHOLDER-10)) (cons mod PLACEHOLDER-12))) (recur (inc PLACEHOLDER-10) PLACEHOLDER-11 (cons mod PLACEHOLDER-12)))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-7 num)))))))