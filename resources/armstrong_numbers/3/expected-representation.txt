((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-3 PLACEHOLDER-1] (loop* [PLACEHOLDER-1 PLACEHOLDER-1 PLACEHOLDER-9 PLACEHOLDER-3] (if (zero? PLACEHOLDER-1) PLACEHOLDER-9 (recur (dec PLACEHOLDER-1) (* PLACEHOLDER-9 PLACEHOLDER-3))))))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-5 PLACEHOLDER-4] [(bigint (/ PLACEHOLDER-5 PLACEHOLDER-4)) (mod PLACEHOLDER-5 PLACEHOLDER-4)]))) (def PLACEHOLDER-8 (fn* ([num] (loop* [PLACEHOLDER-11 0 PLACEHOLDER-7 num PLACEHOLDER-13 []] (let* [PLACEHOLDER-2 (PLACEHOLDER-0 PLACEHOLDER-7 10) PLACEHOLDER-12 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-2 0 nil) mod (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-2 1 nil)] (if (zero? PLACEHOLDER-12) (reduce + (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-10 PLACEHOLDER-6 PLACEHOLDER-11)) (cons mod PLACEHOLDER-13))) (recur (inc PLACEHOLDER-11) PLACEHOLDER-12 (cons mod PLACEHOLDER-13)))))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-8 num)))))))