((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (loop* [PLACEHOLDER-0 1 PLACEHOLDER-0 PLACEHOLDER-0] (if (zero? PLACEHOLDER-0) PLACEHOLDER-0 (recur (* PLACEHOLDER-0 PLACEHOLDER-0) (dec PLACEHOLDER-0))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-0 (count (str num)) PLACEHOLDER-2 (map (fn* [PLACEHOLDER-2] (Character/digit PLACEHOLDER-2 10)) (seq (str num)))] (if (= PLACEHOLDER-0 1) true (if (= PLACEHOLDER-0 2) false (if (>= PLACEHOLDER-0 3) (if (= (reduce (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (+ PLACEHOLDER-0 (PLACEHOLDER-0 PLACEHOLDER-0 PLACEHOLDER-0)))) 0 PLACEHOLDER-2) num) true false) (if :else false nil))))))))))