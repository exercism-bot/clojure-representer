((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-2 (fn* ([PLACEHOLDER-0] (/ (- PLACEHOLDER-0 (mod PLACEHOLDER-0 10)) 10)))) (def PLACEHOLDER-3 (fn* ([PLACEHOLDER-1 PLACEHOLDER-4] (reduce * (repeat PLACEHOLDER-4 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (== num (let* [seq (map (fn* ([PLACEHOLDER-1] (mod PLACEHOLDER-1 10))) (take-while (fn* ([PLACEHOLDER-1] (>= PLACEHOLDER-1 1))) (iterate PLACEHOLDER-2 num)))] (apply + (map (fn* ([PLACEHOLDER-1] (PLACEHOLDER-3 PLACEHOLDER-1 (count seq)))) seq)))))))))