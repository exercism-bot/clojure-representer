(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (require '[clojure.string :as str])
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-1]
    (map
     read-string
     (str/split (str PLACEHOLDER-1) (re-pattern ""))))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (.pow (bigdec PLACEHOLDER-2) PLACEHOLDER-3))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-4 PLACEHOLDER-5]
    (map
     (fn* ([PLACEHOLDER-6] (list PLACEHOLDER-4 PLACEHOLDER-6)))
     PLACEHOLDER-5))))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (clojure.lang.RT/count (PLACEHOLDER-10 PLACEHOLDER-7))]
     (clojure.lang.Util/equiv
      PLACEHOLDER-7
      (bigint
       (reduce
        +
        (map
         (fn*
          ([PLACEHOLDER-9]
           (PLACEHOLDER-11
            (last PLACEHOLDER-9)
            (first PLACEHOLDER-9))))
         (PLACEHOLDER-12
          PLACEHOLDER-8
          (PLACEHOLDER-10 PLACEHOLDER-7)))))))))))
