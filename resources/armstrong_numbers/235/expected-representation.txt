((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (let* [PLACEHOLDER-7 (clojure.core/-new-var) PLACEHOLDER-3 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-7 (clojure.core/constantly (fn* PLACEHOLDER-7 ([PLACEHOLDER-9] (mod PLACEHOLDER-9 10))))) (clojure.core/alter-var-root PLACEHOLDER-3 (clojure.core/constantly (fn* PLACEHOLDER-3 ([PLACEHOLDER-12] (let* [PLACEHOLDER-5 PLACEHOLDER-12 PLACEHOLDER-9 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-5 0 nil) PLACEHOLDER-0 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-5 1 nil)] (let* [PLACEHOLDER-9 (quot PLACEHOLDER-9 10)] [PLACEHOLDER-9 (PLACEHOLDER-7 PLACEHOLDER-9)])))))) (let* [PLACEHOLDER-7 (clojure.core/var-get PLACEHOLDER-7) PLACEHOLDER-3 (clojure.core/var-get PLACEHOLDER-3)] (map last (take-while (fn* [PLACEHOLDER-14] (> (first PLACEHOLDER-14) 0)) (iterate PLACEHOLDER-3 [num (PLACEHOLDER-7 num)])))))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-1 PLACEHOLDER-13] (reduce * (repeat PLACEHOLDER-13 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-11 (PLACEHOLDER-4 num) PLACEHOLDER-10 (count PLACEHOLDER-11) PLACEHOLDER-2 (reduce + (map (fn* [PLACEHOLDER-8] (PLACEHOLDER-6 PLACEHOLDER-8 PLACEHOLDER-10)) PLACEHOLDER-11))] (= num PLACEHOLDER-2)))))))