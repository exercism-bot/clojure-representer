((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([num] (let* [PLACEHOLDER-7 (clojure.core/-new-var) PLACEHOLDER-4 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-7 (clojure.core/constantly (fn* PLACEHOLDER-7 ([PLACEHOLDER-10] (mod PLACEHOLDER-10 10))))) (clojure.core/alter-var-root PLACEHOLDER-4 (clojure.core/constantly (fn* PLACEHOLDER-4 ([PLACEHOLDER-3] (let* [PLACEHOLDER-9 PLACEHOLDER-3 PLACEHOLDER-10 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-9 0 nil) PLACEHOLDER-0 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-9 1 nil)] (let* [PLACEHOLDER-10 (quot PLACEHOLDER-10 10)] [PLACEHOLDER-10 (PLACEHOLDER-7 PLACEHOLDER-10)])))))) (let* [PLACEHOLDER-7 (clojure.core/var-get PLACEHOLDER-7) PLACEHOLDER-4 (clojure.core/var-get PLACEHOLDER-4)] (map last (take-while (fn* [PLACEHOLDER-13] (> (first PLACEHOLDER-13) 0)) (iterate PLACEHOLDER-4 [num (PLACEHOLDER-7 num)])))))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-1 PLACEHOLDER-14] (reduce * (repeat PLACEHOLDER-14 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-12 (PLACEHOLDER-5 num) PLACEHOLDER-11 (count PLACEHOLDER-12) PLACEHOLDER-2 (reduce + (map (fn* [PLACEHOLDER-8] (PLACEHOLDER-6 PLACEHOLDER-8 PLACEHOLDER-11)) PLACEHOLDER-12))] (= num PLACEHOLDER-2)))))))