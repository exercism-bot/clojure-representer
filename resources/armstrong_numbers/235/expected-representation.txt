((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-4 (fn* ([num] (let* [PLACEHOLDER-6 (clojure.core/-new-var) PLACEHOLDER-3 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-6 (clojure.core/constantly (fn* PLACEHOLDER-6 ([PLACEHOLDER-8] (mod PLACEHOLDER-8 10))))) (clojure.core/alter-var-root PLACEHOLDER-3 (clojure.core/constantly (fn* PLACEHOLDER-3 ([PLACEHOLDER-12] (let* [PLACEHOLDER-10 PLACEHOLDER-12 PLACEHOLDER-8 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-10 0 nil) PLACEHOLDER-0 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-10 1 nil)] (let* [PLACEHOLDER-8 (quot PLACEHOLDER-8 10)] [PLACEHOLDER-8 (PLACEHOLDER-6 PLACEHOLDER-8)])))))) (let* [PLACEHOLDER-6 (clojure.core/var-get PLACEHOLDER-6) PLACEHOLDER-3 (clojure.core/var-get PLACEHOLDER-3)] (map last (take-while (fn* [PLACEHOLDER-13] (> (first PLACEHOLDER-13) 0)) (iterate PLACEHOLDER-3 [num (PLACEHOLDER-6 num)])))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-1 PLACEHOLDER-14] (reduce * (repeat PLACEHOLDER-14 PLACEHOLDER-1))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-11 (PLACEHOLDER-4 num) PLACEHOLDER-9 (count PLACEHOLDER-11) PLACEHOLDER-2 (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-5 PLACEHOLDER-7 PLACEHOLDER-9)) PLACEHOLDER-11))] (= num PLACEHOLDER-2)))))))