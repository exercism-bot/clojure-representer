((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (let* [PLACEHOLDER-1 (clojure.core/-new-var) PLACEHOLDER-1 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-1 (clojure.core/constantly (fn* PLACEHOLDER-1 ([PLACEHOLDER-3] (mod PLACEHOLDER-3 10))))) (clojure.core/alter-var-root PLACEHOLDER-1 (clojure.core/constantly (fn* PLACEHOLDER-1 ([PLACEHOLDER-4] (let* [PLACEHOLDER-4 PLACEHOLDER-4 PLACEHOLDER-3 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-4 0 nil) PLACEHOLDER-5 ((read-string "#object[clojure.core$nth \"clojure.core$nth\"]") PLACEHOLDER-4 1 nil)] (let* [PLACEHOLDER-3 (quot PLACEHOLDER-3 10)] [PLACEHOLDER-3 (PLACEHOLDER-1 PLACEHOLDER-3)])))))) (let* [PLACEHOLDER-1 (clojure.core/var-get PLACEHOLDER-1) PLACEHOLDER-1 (clojure.core/var-get PLACEHOLDER-1)] (map last (take-while (fn* [PLACEHOLDER-8] (> (first PLACEHOLDER-8) 0)) (iterate PLACEHOLDER-1 [num (PLACEHOLDER-1 num)])))))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-8 PLACEHOLDER-9] (reduce * (repeat PLACEHOLDER-9 PLACEHOLDER-8))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-10 (PLACEHOLDER-0 num) PLACEHOLDER-11 (count PLACEHOLDER-10) PLACEHOLDER-12 (reduce + (map (fn* [PLACEHOLDER-12] (PLACEHOLDER-8 PLACEHOLDER-12 PLACEHOLDER-11)) PLACEHOLDER-10))] (= num PLACEHOLDER-12)))))))