((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([num] (let* [PLACEHOLDER-9 (clojure.core/-new-var) PLACEHOLDER-4 (clojure.core/-new-var)] (clojure.core/alter-var-root PLACEHOLDER-9 (clojure.core/constantly (fn* PLACEHOLDER-9 ([PLACEHOLDER-11] (mod PLACEHOLDER-11 10))))) (clojure.core/alter-var-root PLACEHOLDER-4 (clojure.core/constantly (fn* PLACEHOLDER-4 ([PLACEHOLDER-10] (let* [PLACEHOLDER-1 PLACEHOLDER-10 PLACEHOLDER-11 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-1 0 nil) PLACEHOLDER-0 (#object[clojure.core$nth "clojure.core$nth"] PLACEHOLDER-1 1 nil)] (let* [PLACEHOLDER-11 (quot PLACEHOLDER-11 10)] [PLACEHOLDER-11 (PLACEHOLDER-9 PLACEHOLDER-11)])))))) (let* [PLACEHOLDER-9 (clojure.core/var-get PLACEHOLDER-9) PLACEHOLDER-4 (clojure.core/var-get PLACEHOLDER-4)] (map last (take-while (fn* [PLACEHOLDER-6] (> (first PLACEHOLDER-6) 0)) (iterate PLACEHOLDER-4 [num (PLACEHOLDER-9 num)])))))))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-2 PLACEHOLDER-14] (reduce * (repeat PLACEHOLDER-14 PLACEHOLDER-2))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-13 (PLACEHOLDER-5 num) PLACEHOLDER-12 (count PLACEHOLDER-13) PLACEHOLDER-3 (reduce + (map (fn* [PLACEHOLDER-7] (PLACEHOLDER-8 PLACEHOLDER-7 PLACEHOLDER-12)) PLACEHOLDER-13))] (= num PLACEHOLDER-3)))))))