(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-9
  (fn*
   ([PLACEHOLDER-1]
    (if
     (clojure.lang.Numbers/isPos PLACEHOLDER-1)
     (conj
      (PLACEHOLDER-9 (clojure.lang.Numbers/quotient PLACEHOLDER-1 10))
      (mod PLACEHOLDER-1 10))
     []))))
 (def
  PLACEHOLDER-10
  (fn*
   ([PLACEHOLDER-2 PLACEHOLDER-3]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-3)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-2
      (expt
       PLACEHOLDER-2
       (clojure.lang.Numbers/dec PLACEHOLDER-3)))))))
 (def
  PLACEHOLDER-11
  (fn*
   ([PLACEHOLDER-4]
    (let*
     [PLACEHOLDER-5
      (PLACEHOLDER-9 PLACEHOLDER-4)
      PLACEHOLDER-6
      (clojure.lang.RT/count PLACEHOLDER-5)]
     (apply
      +
      (map
       (fn*
        ([PLACEHOLDER-7] (PLACEHOLDER-10 PLACEHOLDER-7 PLACEHOLDER-6)))
       PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-8]
    (clojure.lang.Util/equiv
     PLACEHOLDER-8
     (PLACEHOLDER-11 PLACEHOLDER-8))))))
