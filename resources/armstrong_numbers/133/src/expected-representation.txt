(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-1]
    (map
     (fn*
      ([PLACEHOLDER-2] (java.lang.Character/digit PLACEHOLDER-2 10)))
     (str PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-3 PLACEHOLDER-4]
    (loop*
     [PLACEHOLDER-5 1 PLACEHOLDER-6 PLACEHOLDER-4]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-6)
      PLACEHOLDER-5
      (recur
       (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-5)
       (clojure.lang.Numbers/dec PLACEHOLDER-6)))))))
 (def
  PLACEHOLDER-15
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (PLACEHOLDER-13 PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-8)]
     (map
      (fn*
       ([PLACEHOLDER-10]
        (PLACEHOLDER-14 PLACEHOLDER-10 PLACEHOLDER-9)))
      PLACEHOLDER-8)))))
 (def
  PLACEHOLDER-16
  (fn* ([PLACEHOLDER-11] (reduce + (PLACEHOLDER-15 PLACEHOLDER-11)))))
 (def
  PLACEHOLDER-17
  (fn*
   ([PLACEHOLDER-12]
    (clojure.lang.Util/equiv
     (PLACEHOLDER-16 PLACEHOLDER-12)
     PLACEHOLDER-12)))))
