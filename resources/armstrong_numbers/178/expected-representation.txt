((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (let* [PLACEHOLDER-1 PLACEHOLDER-0 PLACEHOLDER-1 (if ((read-string "#object[clojure.core$seq \"clojure.core$seq\"]") PLACEHOLDER-1) (clojure.core/seq-to-map-for-destructuring PLACEHOLDER-1) PLACEHOLDER-1) PLACEHOLDER-1 PLACEHOLDER-1 num (clojure.core/get PLACEHOLDER-1 :num) PLACEHOLDER-2 (clojure.core/get PLACEHOLDER-1 :digits) PLACEHOLDER-2 (clojure.core/get PLACEHOLDER-1 :numDigits)] (if (<= num 0) PLACEHOLDER-1 (recur {:num (quot num 10), :digits (conj PLACEHOLDER-2 (rem num 10)), :numDigits (inc PLACEHOLDER-2)})))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-5 PLACEHOLDER-6] (reduce * (repeat PLACEHOLDER-6 PLACEHOLDER-5))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-7 (PLACEHOLDER-0 {:num num, :digits [], :numDigits 0})] (= num (reduce (fn* [PLACEHOLDER-8 PLACEHOLDER-9] (+ PLACEHOLDER-8 (PLACEHOLDER-5 PLACEHOLDER-9 (get PLACEHOLDER-7 :numDigits)))) 0 (get PLACEHOLDER-7 :digits)))))))))