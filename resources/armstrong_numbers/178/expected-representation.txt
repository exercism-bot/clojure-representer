((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-11] (let* [PLACEHOLDER-1 PLACEHOLDER-11 PLACEHOLDER-1 (if (#object[clojure.core$seq "clojure.core$seq"] PLACEHOLDER-1) (clojure.core/seq-to-map-for-destructuring PLACEHOLDER-1) PLACEHOLDER-1) PLACEHOLDER-8 PLACEHOLDER-1 num (clojure.core/get PLACEHOLDER-1 :num) PLACEHOLDER-7 (clojure.core/get PLACEHOLDER-1 :digits) PLACEHOLDER-9 (clojure.core/get PLACEHOLDER-1 :numDigits)] (if (<= num 0) PLACEHOLDER-8 (recur {:num (quot num 10), :digits (conj PLACEHOLDER-7 (rem num 10)), :numDigits (inc PLACEHOLDER-9)})))))) (def PLACEHOLDER-6 (fn* ([PLACEHOLDER-0 PLACEHOLDER-5] (reduce * (repeat PLACEHOLDER-5 PLACEHOLDER-0))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-2 (PLACEHOLDER-10 {:num num, :digits [], :numDigits 0})] (= num (reduce (fn* [PLACEHOLDER-4 PLACEHOLDER-3] (+ PLACEHOLDER-4 (PLACEHOLDER-6 PLACEHOLDER-3 (get PLACEHOLDER-2 :numDigits)))) 0 (get PLACEHOLDER-2 :digits)))))))))