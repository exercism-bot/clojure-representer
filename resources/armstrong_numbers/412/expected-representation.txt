((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (= num (long (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-3 ([PLACEHOLDER-5] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-5 PLACEHOLDER-5] (let* [PLACEHOLDER-5 (clojure.core/seq PLACEHOLDER-5)] (if PLACEHOLDER-5 (do (if (clojure.core/chunked-seq? PLACEHOLDER-5) (let* [PLACEHOLDER-8 (clojure.core/chunk-first PLACEHOLDER-5) PLACEHOLDER-4 (clojure.core/int (clojure.core/count PLACEHOLDER-8)) PLACEHOLDER-2 (clojure.core/chunk-buffer PLACEHOLDER-4)] (if (loop* [PLACEHOLDER-7 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-7 PLACEHOLDER-4) (let* [PLACEHOLDER-1 (clojure.core/nth PLACEHOLDER-8 PLACEHOLDER-7)] (let* [PLACEHOLDER-6 (count (str num))] (do (clojure.core/chunk-append PLACEHOLDER-2 (PLACEHOLDER-9 (biginteger (str PLACEHOLDER-1)) PLACEHOLDER-6)) (recur (clojure.core/unchecked-inc PLACEHOLDER-7))))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) (PLACEHOLDER-3 (clojure.core/chunk-rest PLACEHOLDER-5))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-5)] (let* [PLACEHOLDER-6 (count (str num))] (clojure.core/cons (PLACEHOLDER-9 (biginteger (str PLACEHOLDER-1)) PLACEHOLDER-6) (PLACEHOLDER-3 (clojure.core/rest PLACEHOLDER-5))))))))))))))] (PLACEHOLDER-0 (str num)))))))))))