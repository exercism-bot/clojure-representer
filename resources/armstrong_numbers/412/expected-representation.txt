((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def armstrong? (fn* ([num] (= num (long (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-2 ([PLACEHOLDER-3] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-3 PLACEHOLDER-3] (let* [PLACEHOLDER-3 (clojure.core/seq PLACEHOLDER-3)] (if PLACEHOLDER-3 (do (if (clojure.core/chunked-seq? PLACEHOLDER-3) (let* [PLACEHOLDER-7 (clojure.core/chunk-first PLACEHOLDER-3) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-7)) PLACEHOLDER-4 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-9 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-9 PLACEHOLDER-5) (let* [PLACEHOLDER-1 (clojure.core/nth PLACEHOLDER-7 PLACEHOLDER-9)] (let* [PLACEHOLDER-6 (count (str num))] (do (clojure.core/chunk-append PLACEHOLDER-4 (PLACEHOLDER-8 (biginteger (str PLACEHOLDER-1)) PLACEHOLDER-6)) (recur (clojure.core/unchecked-inc PLACEHOLDER-9))))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-4) (PLACEHOLDER-2 (clojure.core/chunk-rest PLACEHOLDER-3))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-4) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-3)] (let* [PLACEHOLDER-6 (count (str num))] (clojure.core/cons (PLACEHOLDER-8 (biginteger (str PLACEHOLDER-1)) PLACEHOLDER-6) (PLACEHOLDER-2 (clojure.core/rest PLACEHOLDER-3))))))))))))))] (PLACEHOLDER-0 (str num)))))))))))