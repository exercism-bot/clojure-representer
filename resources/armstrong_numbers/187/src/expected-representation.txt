(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-6
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (if
     (clojure.lang.Numbers/isZero PLACEHOLDER-2)
     1
     (clojure.lang.Numbers/multiply
      PLACEHOLDER-1
      (PLACEHOLDER-6
       PLACEHOLDER-1
       (clojure.lang.Numbers/dec PLACEHOLDER-2)))))))
 (def
  PLACEHOLDER-7
  (fn*
   ([PLACEHOLDER-3]
    (map
     (fn*
      ([PLACEHOLDER-4] (java.lang.Character/digit PLACEHOLDER-4 10)))
     (str PLACEHOLDER-3)))))
 (def
  PLACEHOLDER-8
  (fn*
   ([PLACEHOLDER-5]
    (do
     (def PLACEHOLDER-9 (map int (str PLACEHOLDER-5)))
     (def PLACEHOLDER-10 (clojure.lang.RT/count PLACEHOLDER-9))
     (if
      (clojure.lang.Util/equiv
       PLACEHOLDER-5
       (reduce
        (clojure.lang.Numbers/add
         (clojure.lang.Numbers/add map PLACEHOLDER-6)
         (PLACEHOLDER-7 PLACEHOLDER-5))))
      true
      false))))))
