((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/import (quote PLACEHOLDER-0)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num PLACEHOLDER-0] (bigint (PLACEHOLDER-0 (biginteger num) PLACEHOLDER-0))))) (def PLACEHOLDER-1 (fn* ([num] (bigint num)))) (def PLACEHOLDER-2 (fn* ([num nth] (let* [PLACEHOLDER-2 (PLACEHOLDER-0 10 nth) PLACEHOLDER-4 (/ num PLACEHOLDER-2) PLACEHOLDER-5 (PLACEHOLDER-1 PLACEHOLDER-4) PLACEHOLDER-6 (mod PLACEHOLDER-5 10)] (bigint PLACEHOLDER-6))))) (def PLACEHOLDER-7 (fn* ([num] (+ 1 (bigint (PLACEHOLDER-7 num)))))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-7 num nth] (let* [PLACEHOLDER-4 (PLACEHOLDER-2 num nth) PLACEHOLDER-9 (PLACEHOLDER-7 num) PLACEHOLDER-9 (PLACEHOLDER-0 PLACEHOLDER-4 PLACEHOLDER-9) PLACEHOLDER-6 (+ PLACEHOLDER-7 PLACEHOLDER-9)] PLACEHOLDER-6)))) (def PLACEHOLDER-13 (fn* ([num] (let* [PLACEHOLDER-14 (PLACEHOLDER-7 num)] (loop* [PLACEHOLDER-15 (- (PLACEHOLDER-7 num) 1) PLACEHOLDER-7 0] (if (< PLACEHOLDER-15 0) PLACEHOLDER-7 (recur (- PLACEHOLDER-15 1) (PLACEHOLDER-7 PLACEHOLDER-7 num PLACEHOLDER-15)))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-18 (= 0 num)] (if PLACEHOLDER-18 PLACEHOLDER-18 (= num (PLACEHOLDER-13 num)))))))))