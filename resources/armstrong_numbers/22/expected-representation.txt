((do (do (clojure.core/in-ns (quote armstrong-numbers)) (clojure.core/import (quote PLACEHOLDER-4)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-12 (fn* ([num PLACEHOLDER-16] (bigint (PLACEHOLDER-19 (biginteger num) PLACEHOLDER-16))))) (def PLACEHOLDER-5 (fn* ([num] (bigint num)))) (def PLACEHOLDER-1 (fn* ([num nth] (let* [PLACEHOLDER-8 (PLACEHOLDER-12 10 nth) PLACEHOLDER-6 (/ num PLACEHOLDER-8) PLACEHOLDER-11 (PLACEHOLDER-5 PLACEHOLDER-6) PLACEHOLDER-17 (mod PLACEHOLDER-11 10)] (bigint PLACEHOLDER-17))))) (def PLACEHOLDER-18 (fn* ([num] (+ 1 (bigint (PLACEHOLDER-3 num)))))) (def PLACEHOLDER-15 (fn* ([PLACEHOLDER-7 num nth] (let* [PLACEHOLDER-6 (PLACEHOLDER-1 num nth) PLACEHOLDER-2 (PLACEHOLDER-18 num) PLACEHOLDER-13 (PLACEHOLDER-12 PLACEHOLDER-6 PLACEHOLDER-2) PLACEHOLDER-17 (+ PLACEHOLDER-7 PLACEHOLDER-13)] PLACEHOLDER-17)))) (def PLACEHOLDER-14 (fn* ([num] (let* [PLACEHOLDER-10 (PLACEHOLDER-18 num)] (loop* [PLACEHOLDER-0 (- (PLACEHOLDER-18 num) 1) PLACEHOLDER-7 0] (if (< PLACEHOLDER-0 0) PLACEHOLDER-7 (recur (- PLACEHOLDER-0 1) (PLACEHOLDER-15 PLACEHOLDER-7 num PLACEHOLDER-0)))))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-9 (= 0 num)] (if PLACEHOLDER-9 PLACEHOLDER-9 (= num (PLACEHOLDER-14 num)))))))))