((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (- (int PLACEHOLDER-0) (int \0))))) (def PLACEHOLDER-0 (fn* ([num] (map PLACEHOLDER-0 (seq (str num)))))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-2] (fn* ([PLACEHOLDER-2] (PLACEHOLDER-1 PLACEHOLDER-2 PLACEHOLDER-2)))) ([PLACEHOLDER-2 PLACEHOLDER-2] (reduce * (repeat PLACEHOLDER-2 PLACEHOLDER-2))))) (def armstrong? (fn* ([num] (let* [PLACEHOLDER-5 (PLACEHOLDER-0 num) PLACEHOLDER-6 (count PLACEHOLDER-5)] (= num (reduce + (map (PLACEHOLDER-1 PLACEHOLDER-6) PLACEHOLDER-5)))))))))