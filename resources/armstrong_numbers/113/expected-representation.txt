((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (PLACEHOLDER-9 PLACEHOLDER-1 PLACEHOLDER-7)))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (. (PLACEHOLDER-13 (double PLACEHOLDER-1)) PLACEHOLDER-10 PLACEHOLDER-7)))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-3] (if (= (count PLACEHOLDER-3) 0) [] (conj (PLACEHOLDER-4 (subvec PLACEHOLDER-3 1)) (Integer/parseInt (get PLACEHOLDER-3 0))))))) (def PLACEHOLDER-12 (fn* ([PLACEHOLDER-16 PLACEHOLDER-5] (if (= (count PLACEHOLDER-16) 1) (PLACEHOLDER-10 (get PLACEHOLDER-16 0) PLACEHOLDER-5) (+ (PLACEHOLDER-10 (get PLACEHOLDER-16 0) PLACEHOLDER-5) (PLACEHOLDER-12 (subvec PLACEHOLDER-16 1) PLACEHOLDER-5)))))) (def PLACEHOLDER-14 (fn* ([PLACEHOLDER-16 PLACEHOLDER-5] (if (= (count PLACEHOLDER-16) 1) (PLACEHOLDER-0 (get PLACEHOLDER-16 0) PLACEHOLDER-5) (. (PLACEHOLDER-0 (get PLACEHOLDER-16 0) PLACEHOLDER-5) PLACEHOLDER-2 (PLACEHOLDER-14 (subvec PLACEHOLDER-16 1) PLACEHOLDER-5)))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-8 (str "" num)) (def PLACEHOLDER-15 (count PLACEHOLDER-8)) (def PLACEHOLDER-11 (subvec (clojure.string/split PLACEHOLDER-8 (re-pattern "")) 0)) (def PLACEHOLDER-6 (PLACEHOLDER-14 (PLACEHOLDER-4 PLACEHOLDER-11) PLACEHOLDER-15)) (= (PLACEHOLDER-13 num) PLACEHOLDER-6))))))