((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (PLACEHOLDER-1 PLACEHOLDER-0 PLACEHOLDER-0)))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-0 PLACEHOLDER-0] (. (PLACEHOLDER-3 (double PLACEHOLDER-0)) PLACEHOLDER-0 PLACEHOLDER-0)))) (def PLACEHOLDER-4 (fn* ([PLACEHOLDER-4] (if (= (count PLACEHOLDER-4) 0) [] (conj (PLACEHOLDER-4 (subvec PLACEHOLDER-4 1)) (Integer/parseInt (get PLACEHOLDER-4 0))))))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-5 PLACEHOLDER-5] (if (= (count PLACEHOLDER-5) 1) (PLACEHOLDER-0 (get PLACEHOLDER-5 0) PLACEHOLDER-5) (+ (PLACEHOLDER-0 (get PLACEHOLDER-5 0) PLACEHOLDER-5) (PLACEHOLDER-5 (subvec PLACEHOLDER-5 1) PLACEHOLDER-5)))))) (def PLACEHOLDER-9 (fn* ([PLACEHOLDER-5 PLACEHOLDER-5] (if (= (count PLACEHOLDER-5) 1) (PLACEHOLDER-1 (get PLACEHOLDER-5 0) PLACEHOLDER-5) (. (PLACEHOLDER-1 (get PLACEHOLDER-5 0) PLACEHOLDER-5) PLACEHOLDER-13 (PLACEHOLDER-9 (subvec PLACEHOLDER-5 1) PLACEHOLDER-5)))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-15 (str "" num)) (def PLACEHOLDER-15 (count PLACEHOLDER-15)) (def PLACEHOLDER-16 (subvec (clojure.string/split PLACEHOLDER-15 (re-pattern "")) 0)) (def PLACEHOLDER-16 (PLACEHOLDER-9 (PLACEHOLDER-4 PLACEHOLDER-16) PLACEHOLDER-15)) (= (PLACEHOLDER-3 num) PLACEHOLDER-16))))))