((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-1 PLACEHOLDER-4] (if (zero? PLACEHOLDER-4) 1 (* PLACEHOLDER-1 (PLACEHOLDER-5 PLACEHOLDER-1 (dec PLACEHOLDER-4))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-9 (str num)) (def PLACEHOLDER-10 (count PLACEHOLDER-9)) (def PLACEHOLDER-11 (clojure.string/split PLACEHOLDER-9 (re-pattern ""))) (def PLACEHOLDER-8 (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-6 ([PLACEHOLDER-14] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-14 PLACEHOLDER-14] (let* [PLACEHOLDER-14 (clojure.core/seq PLACEHOLDER-14)] (if PLACEHOLDER-14 (do (if (clojure.core/chunked-seq? PLACEHOLDER-14) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-14) PLACEHOLDER-3 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-2 (clojure.core/chunk-buffer PLACEHOLDER-3)] (if (loop* [PLACEHOLDER-7 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-7 PLACEHOLDER-3) (let* [PLACEHOLDER-1 (clojure.core/nth-12 PLACEHOLDER-7)] (do (clojure.core/chunk-append PLACEHOLDER-2 (PLACEHOLDER-5 (PLACEHOLDER-13 PLACEHOLDER-1) PLACEHOLDER-10)) (recur (clojure.core/unchecked-inc PLACEHOLDER-7)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) (PLACEHOLDER-6 (clojure.core/chunk-rest PLACEHOLDER-14))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-14)] (clojure.core/cons (PLACEHOLDER-5 (PLACEHOLDER-13 PLACEHOLDER-1) PLACEHOLDER-10) (PLACEHOLDER-6 (clojure.core/rest PLACEHOLDER-14)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-11)))) (= (long PLACEHOLDER-8) (long num)))))))