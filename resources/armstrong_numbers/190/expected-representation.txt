((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-7 (fn* ([PLACEHOLDER-2 PLACEHOLDER-5] (if (zero? PLACEHOLDER-5) 1 (* PLACEHOLDER-2 (PLACEHOLDER-7 PLACEHOLDER-2 (dec PLACEHOLDER-5))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-10 (str num)) (def PLACEHOLDER-11 (count PLACEHOLDER-10)) (def PLACEHOLDER-12 (clojure.string/split PLACEHOLDER-10 (re-pattern ""))) (def PLACEHOLDER-9 (reduce + (let* [PLACEHOLDER-1 (fn* PLACEHOLDER-8 ([PLACEHOLDER-4] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-4 PLACEHOLDER-4] (let* [PLACEHOLDER-4 (clojure.core/seq PLACEHOLDER-4)] (if PLACEHOLDER-4 (do (if (clojure.core/chunked-seq? PLACEHOLDER-4) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-4) PLACEHOLDER-3 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-0 (clojure.core/chunk-buffer PLACEHOLDER-3)] (if (loop* [PLACEHOLDER-6 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-6 PLACEHOLDER-3) (let* [PLACEHOLDER-2 (clojure.core/nth PLACEHOLDER-13 PLACEHOLDER-6)] (do (clojure.core/chunk-append PLACEHOLDER-0 (PLACEHOLDER-7 (PLACEHOLDER-14 PLACEHOLDER-2) PLACEHOLDER-11)) (recur (clojure.core/unchecked-inc PLACEHOLDER-6)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-0) (PLACEHOLDER-8 (clojure.core/chunk-rest PLACEHOLDER-4))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-0) nil))) (let* [PLACEHOLDER-2 (clojure.core/first PLACEHOLDER-4)] (clojure.core/cons (PLACEHOLDER-7 (PLACEHOLDER-14 PLACEHOLDER-2) PLACEHOLDER-11) (PLACEHOLDER-8 (clojure.core/rest PLACEHOLDER-4)))))))))))))] (PLACEHOLDER-1 PLACEHOLDER-12)))) (= (long PLACEHOLDER-9) (long num)))))))