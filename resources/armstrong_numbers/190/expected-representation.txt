((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-5 (fn* ([PLACEHOLDER-1 PLACEHOLDER-4] (if (zero? PLACEHOLDER-4) 1 (* PLACEHOLDER-1 (PLACEHOLDER-5 PLACEHOLDER-1 (dec PLACEHOLDER-4))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-8 (str num)) (def PLACEHOLDER-9 (count PLACEHOLDER-8)) (def PLACEHOLDER-11 (clojure.string/split PLACEHOLDER-8 (re-pattern ""))) (def PLACEHOLDER-7 (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-13 ([PLACEHOLDER-2] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-2 PLACEHOLDER-2] (let* [PLACEHOLDER-2 (clojure.core/seq PLACEHOLDER-2)] (if PLACEHOLDER-2 (do (if (clojure.core/chunked-seq? PLACEHOLDER-2) (let* [PLACEHOLDER-12 (clojure.core/chunk-first PLACEHOLDER-2) PLACEHOLDER-3 (clojure.core/int (clojure.core/count PLACEHOLDER-12)) PLACEHOLDER-6 (clojure.core/chunk-buffer PLACEHOLDER-3)] (if (loop* [PLACEHOLDER-10 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-10 PLACEHOLDER-3) (let* [PLACEHOLDER-1 (clojure.core/nth PLACEHOLDER-12 PLACEHOLDER-10)] (do (clojure.core/chunk-append PLACEHOLDER-6 (PLACEHOLDER-5 (PLACEHOLDER-14 PLACEHOLDER-1) PLACEHOLDER-9)) (recur (clojure.core/unchecked-inc PLACEHOLDER-10)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) (PLACEHOLDER-13 (clojure.core/chunk-rest PLACEHOLDER-2))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-6) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-2)] (clojure.core/cons (PLACEHOLDER-5 (PLACEHOLDER-14 PLACEHOLDER-1) PLACEHOLDER-9) (PLACEHOLDER-13 (clojure.core/rest PLACEHOLDER-2)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-11)))) (= (long PLACEHOLDER-7) (long num)))))))