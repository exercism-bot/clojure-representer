((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-8 (fn* ([PLACEHOLDER-1 PLACEHOLDER-7] (if (zero? PLACEHOLDER-7) 1 (* PLACEHOLDER-1 (PLACEHOLDER-8 PLACEHOLDER-1 (dec PLACEHOLDER-7))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-10 (str num)) (def PLACEHOLDER-11 (count PLACEHOLDER-10)) (def PLACEHOLDER-12 (clojure.string/split PLACEHOLDER-10 (re-pattern ""))) (def PLACEHOLDER-9 (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-3 ([PLACEHOLDER-6] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-6 PLACEHOLDER-6] (let* [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-6)] (if PLACEHOLDER-6 (do (if (clojure.core/chunked-seq? PLACEHOLDER-6) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-6) PLACEHOLDER-5 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-2 (clojure.core/chunk-buffer PLACEHOLDER-5)] (if (loop* [PLACEHOLDER-4 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-4 PLACEHOLDER-5) (let* [PLACEHOLDER-1 (clojure.core/nth-13 PLACEHOLDER-4)] (do (clojure.core/chunk-append PLACEHOLDER-2 (PLACEHOLDER-8 (PLACEHOLDER-14 PLACEHOLDER-1) PLACEHOLDER-11)) (recur (clojure.core/unchecked-inc PLACEHOLDER-4)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) (PLACEHOLDER-3 (clojure.core/chunk-rest PLACEHOLDER-6))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-2) nil))) (let* [PLACEHOLDER-1 (clojure.core/first PLACEHOLDER-6)] (clojure.core/cons (PLACEHOLDER-8 (PLACEHOLDER-14 PLACEHOLDER-1) PLACEHOLDER-11) (PLACEHOLDER-3 (clojure.core/rest PLACEHOLDER-6)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-12)))) (= (long PLACEHOLDER-9) (long num)))))))