((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0 PLACEHOLDER-1] (if (zero? PLACEHOLDER-1) 1 (* PLACEHOLDER-0 (PLACEHOLDER-0 PLACEHOLDER-0 (dec PLACEHOLDER-1))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-1 (str num)) (def PLACEHOLDER-2 (count PLACEHOLDER-1)) (def PLACEHOLDER-2 (clojure.string/split PLACEHOLDER-1 (re-pattern ""))) (def PLACEHOLDER-3 (reduce + (let* [PLACEHOLDER-3 (fn* PLACEHOLDER-3 ([PLACEHOLDER-4] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-4 PLACEHOLDER-4] (let* [PLACEHOLDER-4 (clojure.core/seq PLACEHOLDER-4)] (if PLACEHOLDER-4 (do (if (clojure.core/chunked-seq? PLACEHOLDER-4) (let* [PLACEHOLDER-6 (clojure.core/chunk-first PLACEHOLDER-4) PLACEHOLDER-6 (clojure.core/int (clojure.core/count PLACEHOLDER-6)) PLACEHOLDER-7 (clojure.core/chunk-buffer PLACEHOLDER-6)] (if (loop* [PLACEHOLDER-7 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-7 PLACEHOLDER-6) (let* [PLACEHOLDER-0 (clojure.core/nth-12 PLACEHOLDER-7)] (do (clojure.core/chunk-append PLACEHOLDER-7 (PLACEHOLDER-0 (PLACEHOLDER-10 PLACEHOLDER-0) PLACEHOLDER-2)) (recur (clojure.core/unchecked-inc PLACEHOLDER-7)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-7) (PLACEHOLDER-3 (clojure.core/chunk-rest PLACEHOLDER-4))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-7) nil))) (let* [PLACEHOLDER-0 (clojure.core/first PLACEHOLDER-4)] (clojure.core/cons (PLACEHOLDER-0 (PLACEHOLDER-10 PLACEHOLDER-0) PLACEHOLDER-2) (PLACEHOLDER-3 (clojure.core/rest PLACEHOLDER-4)))))))))))))] (PLACEHOLDER-3 PLACEHOLDER-2)))) (= (long PLACEHOLDER-3) (long num)))))))