((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-10 (fn* ([PLACEHOLDER-2 PLACEHOLDER-9] (if (zero? PLACEHOLDER-9) 1 (* PLACEHOLDER-2 (PLACEHOLDER-10 PLACEHOLDER-2 (dec PLACEHOLDER-9))))))) (def armstrong? (fn* ([num] (def PLACEHOLDER-1 (str num)) (def PLACEHOLDER-5 (clojure.string/split PLACEHOLDER-1 (re-pattern ""))) (def PLACEHOLDER-12 (count PLACEHOLDER-5)) (def PLACEHOLDER-11 (reduce + (let* [PLACEHOLDER-0 (fn* PLACEHOLDER-4 ([PLACEHOLDER-8] (new clojure.lang.LazySeq (fn* [] (loop* [PLACEHOLDER-8 PLACEHOLDER-8] (let* [PLACEHOLDER-8 (clojure.core/seq PLACEHOLDER-8)] (if PLACEHOLDER-8 (do (if (clojure.core/chunked-seq? PLACEHOLDER-8) (let* [PLACEHOLDER-13 (clojure.core/chunk-first PLACEHOLDER-8) PLACEHOLDER-7 (clojure.core/int (clojure.core/count PLACEHOLDER-13)) PLACEHOLDER-3 (clojure.core/chunk-buffer PLACEHOLDER-7)] (if (loop* [PLACEHOLDER-6 (clojure.core/int 0)] (if (clojure.core/< PLACEHOLDER-6 PLACEHOLDER-7) (let* [PLACEHOLDER-2 (clojure.core/nth PLACEHOLDER-13 PLACEHOLDER-6)] (do (clojure.core/chunk-append PLACEHOLDER-3 (PLACEHOLDER-10 (PLACEHOLDER-14 PLACEHOLDER-2) PLACEHOLDER-12)) (recur (clojure.core/unchecked-inc PLACEHOLDER-6)))) true)) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-3) (PLACEHOLDER-4 (clojure.core/chunk-rest PLACEHOLDER-8))) (clojure.core/chunk-cons (clojure.core/chunk PLACEHOLDER-3) nil))) (let* [PLACEHOLDER-2 (clojure.core/first PLACEHOLDER-8)] (clojure.core/cons (PLACEHOLDER-10 (PLACEHOLDER-14 PLACEHOLDER-2) PLACEHOLDER-12) (PLACEHOLDER-4 (clojure.core/rest PLACEHOLDER-8)))))))))))))] (PLACEHOLDER-0 PLACEHOLDER-5)))) (= (long PLACEHOLDER-11) (long num)))))))