(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-12
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (let*
     [PLACEHOLDER-4
      (fn*
       ([PLACEHOLDER-3]
        (clojure.lang.Numbers/multiply PLACEHOLDER-3 PLACEHOLDER-3)))]
     (if
      (clojure.lang.Numbers/isZero PLACEHOLDER-2)
      1
      (if
       (even? PLACEHOLDER-2)
       (PLACEHOLDER-4
        (PLACEHOLDER-12
         PLACEHOLDER-1
         (clojure.lang.Numbers/divide PLACEHOLDER-2 2)))
       (if
        :else
        (clojure.lang.Numbers/multiply
         PLACEHOLDER-1
         (PLACEHOLDER-12
          PLACEHOLDER-1
          (clojure.lang.Numbers/dec PLACEHOLDER-2))))))))))
 (def
  PLACEHOLDER-13
  (fn*
   ([PLACEHOLDER-5]
    (map
     (fn*
      ([PLACEHOLDER-6] (java.lang.Character/digit PLACEHOLDER-6 10)))
     (.toCharArray (.toString PLACEHOLDER-5))))))
 (def
  PLACEHOLDER-14
  (fn*
   ([PLACEHOLDER-7]
    (let*
     [PLACEHOLDER-8
      (PLACEHOLDER-13 PLACEHOLDER-7)
      PLACEHOLDER-9
      (clojure.lang.RT/count PLACEHOLDER-8)
      PLACEHOLDER-11
      (reduce
       +
       (map
        (fn*
         ([PLACEHOLDER-10]
          (PLACEHOLDER-12 PLACEHOLDER-10 PLACEHOLDER-9)))
        PLACEHOLDER-8))]
     (clojure.lang.Util/equiv PLACEHOLDER-11 PLACEHOLDER-7))))))
