((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([PLACEHOLDER-0] (map (fn* [PLACEHOLDER-0] (read-string (str PLACEHOLDER-0))) (str PLACEHOLDER-0))))) (def PLACEHOLDER-1 (fn* ([PLACEHOLDER-0 PLACEHOLDER-2] (def PLACEHOLDER-2 PLACEHOLDER-0) (if (< 2 PLACEHOLDER-2) (do (loop* [PLACEHOLDER-3 2] (if (<= PLACEHOLDER-3 PLACEHOLDER-2) (do (def PLACEHOLDER-2 (* PLACEHOLDER-0 PLACEHOLDER-2)) (recur (inc PLACEHOLDER-3))))))) PLACEHOLDER-2))) (def armstrong? (fn* ([num] (= num (let* [PLACEHOLDER-3 (count (str num))] (reduce + (map (fn* [PLACEHOLDER-6] (PLACEHOLDER-1 PLACEHOLDER-6 PLACEHOLDER-3)) (PLACEHOLDER-0 num))))))))))