((do (do (clojure.core/in-ns (quote armstrong-numbers)) (if (clojure.core/= (quote armstrong-numbers) (quote clojure.core)) nil (do (clojure.core/-add-loaded-lib (quote armstrong-numbers)) nil))) (def PLACEHOLDER-0 (fn* ([num] (map (fn* [PLACEHOLDER-0] (- (int PLACEHOLDER-0) 48)) (seq (str num)))))) (def PLACEHOLDER-1 (fn* ([num PLACEHOLDER-1] (if (= PLACEHOLDER-1 0) 1 (* num (PLACEHOLDER-1 num (dec PLACEHOLDER-1))))))) (def PLACEHOLDER-2 (fn* ([num] (let* [PLACEHOLDER-2 (PLACEHOLDER-0 num) PLACEHOLDER-1 (count PLACEHOLDER-2)] (reduce (fn* ([PLACEHOLDER-4 PLACEHOLDER-5] (+ PLACEHOLDER-4 (PLACEHOLDER-1 PLACEHOLDER-5 PLACEHOLDER-1)))) (long 0) PLACEHOLDER-2))))) (def armstrong? (fn* ([num] (= num (PLACEHOLDER-2 num)))))))