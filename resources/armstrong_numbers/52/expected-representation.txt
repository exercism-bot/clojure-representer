((do
  (do
   (clojure.core/in-ns 'armstrong-numbers)
   (if
    (clojure.core/= 'armstrong-numbers 'clojure.core)
    nil
    (do (clojure.core/-add-loaded-lib 'armstrong-numbers) nil)))
  (def
   PLACEHOLDER-6
   (fn*
    ([PLACEHOLDER-5 PLACEHOLDER-0]
     (let*
      [iter__auto__
       (fn*
        iter
        ([s]
         (new
          clojure.lang.LazySeq
          (fn*
           []
           (loop*
            [s s]
            (let*
             [s (clojure.core/seq s)]
             (if
              s
              (do
               (if
                (clojure.core/chunked-seq? s)
                (let*
                 [c__auto__
                  (clojure.core/chunk-first s)
                  size__auto__
                  (clojure.core/int (clojure.core/count c__auto__))
                  b
                  (clojure.core/chunk-buffer size__auto__)]
                 (if
                  (loop*
                   [i (clojure.core/int 0)]
                   (if
                    (clojure.core/< i size__auto__)
                    (let*
                     [PLACEHOLDER-4 (clojure.core/nth c__auto__ i)]
                     (do
                      (clojure.core/chunk-append b PLACEHOLDER-0)
                      (recur (clojure.core/unchecked-inc i))))
                    true))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk b)
                   (iter (clojure.core/chunk-rest s)))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk b)
                   nil)))
                (let*
                 [PLACEHOLDER-4 (clojure.core/first s)]
                 (clojure.core/cons
                  PLACEHOLDER-0
                  (iter (clojure.core/rest s)))))))))))))]
      (iter__auto__ PLACEHOLDER-5)))))
  (def
   PLACEHOLDER-7
   (fn*
    ([PLACEHOLDER-1 PLACEHOLDER-5]
     (reduce * (PLACEHOLDER-6 (range PLACEHOLDER-5) PLACEHOLDER-1)))))
  (def
   PLACEHOLDER-8
   (fn*
    ([PLACEHOLDER-3]
     (def PLACEHOLDER-9 (str PLACEHOLDER-3))
     (def PLACEHOLDER-10 (count PLACEHOLDER-9))
     (def
      PLACEHOLDER-11
      (reduce
       (fn*
        ([PLACEHOLDER-2 PLACEHOLDER-1]
         (+
          PLACEHOLDER-2
          (PLACEHOLDER-7
           (Character/digit PLACEHOLDER-1 10)
           PLACEHOLDER-10))))
       0
       PLACEHOLDER-9))
     (== PLACEHOLDER-3 PLACEHOLDER-11))))))
