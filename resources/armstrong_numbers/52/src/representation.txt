(do
 (do
  (clojure.core/in-ns 'armstrong-numbers)
  ((fn*
    PLACEHOLDER-0
    ([]
     (do
      (clojure.lang.Var/pushThreadBindings
       #:clojure.lang.Compiler{LOADER
                               (.getClassLoader
                                (.getClass PLACEHOLDER-0))})
      (try
       (clojure.core/refer 'clojure.core)
       (finally (clojure.lang.Var/popThreadBindings)))))))
  (if
   (.equals 'armstrong-numbers 'clojure.core)
   nil
   (do
    (clojure.lang.LockingTransaction/runInTransaction
     (fn*
      ([]
       (clojure.core/commute
        @#'clojure.core/*loaded-libs*
        clojure.core/conj
        'armstrong-numbers))))
    nil)))
 (def
  PLACEHOLDER-20
  (fn*
   ([PLACEHOLDER-1 PLACEHOLDER-2]
    (let*
     [PLACEHOLDER-14
      (fn*
       PLACEHOLDER-3
       ([PLACEHOLDER-4]
        (new
         clojure.lang.LazySeq
         (fn*
          ([]
           (loop*
            [PLACEHOLDER-5 PLACEHOLDER-4]
            (let*
             [PLACEHOLDER-6 (clojure.core/seq PLACEHOLDER-5)]
             (if
              PLACEHOLDER-6
              (let*
               [PLACEHOLDER-7 PLACEHOLDER-6]
               (if
                (clojure.core/chunked-seq? PLACEHOLDER-7)
                (let*
                 [PLACEHOLDER-8
                  (clojure.core/chunk-first PLACEHOLDER-7)
                  PLACEHOLDER-9
                  (clojure.lang.RT/intCast
                   (clojure.lang.RT/count PLACEHOLDER-8))
                  PLACEHOLDER-10
                  (clojure.core/chunk-buffer PLACEHOLDER-9)]
                 (if
                  (loop*
                   [PLACEHOLDER-11 (clojure.lang.RT/intCast 0)]
                   (if
                    (clojure.lang.Numbers/lt
                     PLACEHOLDER-11
                     PLACEHOLDER-9)
                    (let*
                     [PLACEHOLDER-12
                      (.nth PLACEHOLDER-8 PLACEHOLDER-11)]
                     (do
                      (clojure.core/chunk-append
                       PLACEHOLDER-10
                       PLACEHOLDER-2)
                      (recur
                       (clojure.lang.Numbers/unchecked_inc
                        PLACEHOLDER-11))))
                    true))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk PLACEHOLDER-10)
                   (PLACEHOLDER-3
                    (clojure.core/chunk-rest PLACEHOLDER-7)))
                  (clojure.core/chunk-cons
                   (clojure.core/chunk PLACEHOLDER-10)
                   nil)))
                (let*
                 [PLACEHOLDER-13 (clojure.core/first PLACEHOLDER-7)]
                 (clojure.core/cons
                  PLACEHOLDER-2
                  (PLACEHOLDER-3
                   (clojure.core/rest PLACEHOLDER-7))))))))))))))]
     (PLACEHOLDER-14 PLACEHOLDER-1)))))
 (def
  PLACEHOLDER-21
  (fn*
   ([PLACEHOLDER-15 PLACEHOLDER-16]
    (reduce
     *
     (PLACEHOLDER-20 (range PLACEHOLDER-16) PLACEHOLDER-15)))))
 (def
  PLACEHOLDER-22
  (fn*
   ([PLACEHOLDER-17]
    (do
     (def PLACEHOLDER-23 (str PLACEHOLDER-17))
     (def PLACEHOLDER-24 (clojure.lang.RT/count PLACEHOLDER-23))
     (def
      PLACEHOLDER-25
      (reduce
       (fn*
        ([PLACEHOLDER-18 PLACEHOLDER-19]
         (clojure.lang.Numbers/add
          PLACEHOLDER-18
          (PLACEHOLDER-21
           (java.lang.Character/digit PLACEHOLDER-19 10)
           PLACEHOLDER-24))))
       0
       PLACEHOLDER-23))
     (clojure.lang.Numbers/equiv PLACEHOLDER-17 PLACEHOLDER-25))))))
